{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["/* -------------------------------------------------------------------------- */\n/*                                  Variables                                 */\n/* -------------------------------------------------------------------------- */\n\n// TODO: add function for time to auto logout\n\n// Default settings\nconst lilRedDefaults = {\n\tlilRedApiUrl: null,\n\tlogoutIfStale: true,\n\tdaysTillLogout: 10,\n};\n\n// Settings\nlet lilRedSettings;\n\n// Local storage keys\nconst AUTH_TOKEN = \"lilRedAuthToken\";\nconst LAST_LOGIN = \"lilRedLastLogin\";\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper Functions                              */\n/* -------------------------------------------------------------------------- */\n\nfunction dispatch(name, detail, bubbles = true) {\n\tif (typeof detail === \"string\" && /^ERROR/.test(detail)) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(name, detail);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(name, detail);\n\t}\n\tdocument.dispatchEvent(\n\t\tnew CustomEvent(name, {\n\t\t\tbubbles: bubbles,\n\t\t\tdetail: detail,\n\t\t})\n\t);\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Private Methods                              */\n/* -------------------------------------------------------------------------- */\n\n/**\n * fetcher - basic fetch routine\n * @private\n */\nasync function fetcher(url, options) {\n\t/* eslint-disable no-console */\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tconsole.log(`RESPONSE:lilFetch for ${url}`, response);\n\t\tif (response.status !== 200)\n\t\t\tthrow new Error(`fetch fail status: ${response.status}`);\n\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t// Return JSON if it is JSON otherwise text\n\t\tconst result =\n\t\t\tcontentType && contentType.indexOf(\"application/json\") !== -1\n\t\t\t\t? await response.json()\n\t\t\t\t: await response.text();\n\t\tconsole.log(`RESULT:lilFetch for ${url}`, result);\n\t\treturn result;\n\t} catch (err) {\n\t\tconsole.error(`ERROR:lilFetch for ${url}`, err);\n\t\treturn null;\n\t}\n\t/* eslint-enable no-console */\n}\n\n/**\n * lilRedAuth - lilRed Targeted Fetch\n * @private\n */\nasync function lilAuth(username, password) {\n\tif (!lilRedSettings && lilRedSettings.lilRedApiUrl) return false;\n\tconst url = lilRedSettings.lilRedApiUrl + \"/login\";\n\tconst options = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json;charset=utf-8\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t}),\n\t};\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tif (response.status === 200 && response.headers.get(\"authorization\")) {\n\t\t\tconst token = response.headers.get(\"authorization\");\n\t\t\tlocalStorage.setItem(AUTH_TOKEN, token);\n\t\t\tlocalStorage.setItem(LAST_LOGIN, new Date().toISOString());\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tdispatch(\"lilRed_login\", \"success\");\n\t\t\treturn token;\n\t\t}\n\t} catch (err) {\n\t\tdispatch(\"lilRed_login\", \"fail\");\n\t\treturn null;\n\t}\n}\n\n/**\n * lilFetch - lilRed Targeted Fetch\n * @private\n */\n\nasync function lilFetch(settings) {\n\t// settings = {api,method,body,jsonStringify,token}\n\tsettings = { jsonStringify: true, method: \"GET\", ...settings };\n\n\tif (!lilRedSettings && lilRedSettings.lilRedApiUrl) return false;\n\n\tif (!lilRedSettings.lilRedApiUrl || !settings.api) return false;\n\n\t/* eslint-disable no-unused-vars */\n\tconst url = lilRedSettings.lilRedApiUrl + settings.api;\n\tconst options = {\n\t\tmethod: settings.method,\n\t\theaders: {},\n\t};\n\t// JSON string it by default; this allows for just passing a formData object if desired\n\tif (settings.jsonStringify) {\n\t\tsettings.body = settings.body && JSON.stringify(settings.body);\n\t\toptions.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n\t}\n\t// Add body if there\n\tif (settings.body) options.body = settings.body;\n\t// If has api is more than just the base and it is not public access, then add authorization headers token\n\tif (settings.api !== \"/\" && !/public/.test(settings.api)) {\n\t\t// Check for auth token\n\t\tconst authToken =\n\t\t\tsettings.token ||\n\t\t\tlilRedSettings.token ||\n\t\t\tlocalStorage.getItem(AUTH_TOKEN);\n\n\t\tif (authToken) {\n\t\t\t// Add authorization headers\n\t\t\toptions.headers.Authorization = authToken;\n\t\t} else {\n\t\t\t// If no auth token then stop script\n\t\t\tdispatch(\"lilRed_lilFetch\", \"ERROR: auth token missing\");\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lilRedSettings.logoutIfStale) {\n\t\t\t// Check last login and logout if too old\n\t\t\tconst lastLogin = Date.parse(localStorage.getItem(LAST_LOGIN));\n\t\t\tconst now = new Date();\n\t\t\tconst daysTillLogout = lilRedSettings.daysTillLogout || 10;\n\t\t\tconst earliestAllowedLogin = Date.parse(\n\t\t\t\tnew Date(now.setDate(now.getDate() - daysTillLogout))\n\t\t\t);\n\t\t\tconst isStale =\n\t\t\t\tisNaN(lastLogin) ||\n\t\t\t\tisNaN(earliestAllowedLogin) ||\n\t\t\t\tlastLogin < earliestAllowedLogin;\n\n\t\t\tif (isStale) {\n\t\t\t\tdispatch(\n\t\t\t\t\t\"lilRed_lilFetch\",\n\t\t\t\t\t`ERROR: auth token stale. Last Login: ${lastLogin}`\n\t\t\t\t);\n\t\t\t\tlogout();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Add authorization headers\n\t\toptions.headers.Authorization = authToken;\n\t}\n\n\tlet response = await fetcher(url, options);\n\treturn response;\n}\n\n/**\n * lilGet - shorthand\n * @private\n */\n\nconst lilGet = (api, token) => lilFetch({ api: api, token: token });\n\n/**\n * lilPost - shorthand\n * @private\n */\nconst lilPost = (api, body, token) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"POST\",\n\t\tbody: body,\n\t\ttoken: token,\n\t});\n\n/**\n * lilPut - shorthand\n * @private\n */\nconst lilPut = (api, body, token) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"PUT\",\n\t\tbody: body,\n\t\ttoken: token,\n\t});\n\n/**\n * lilDelete - shorthand\n * @private\n */\nconst lilDelete = (api, body, token) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"DELETE\",\n\t\tbody: body,\n\t\ttoken: token,\n\t});\n\n/* -------------------------------------------------------------------------- */\n/*                      Main LilRed Public Functions                          */\n/* -------------------------------------------------------------------------- */\n\nexport function init(lilRedOptions) {\n\t// Merge user options with defaults\n\t// settings = extend(defaults, options || {});\n\tlilRedSettings = { ...lilRedDefaults, ...lilRedOptions };\n\n\t// eslint-disable-next-line\n\tconsole.log(\"\uD83D\uDC3A Initializing Lil Red Fetch\", lilRedSettings);\n\n\t// Code goes here...\n\t//\n}\n\nconst status = async () => {\n\tconst result = await lilGet(\"/\");\n\tdispatch(\"lilRed_status\", result);\n\treturn result;\n};\nconst isAdmin = () => lilGet(\"/users/me/isadmin\");\nconst login = (username, password) => lilAuth(username, password);\nconst logout = () => {\n\t// eslint-disable-next-line no-console\n\tdispatch(\"lilRed_logout\", \"You have been logged out of Lil Red\");\n\tlocalStorage.removeItem(AUTH_TOKEN);\n\tlocalStorage.removeItem(LAST_LOGIN);\n};\nconst me = () => lilGet(\"/users/me\");\n\nconst bookings = {\n\tslots: () => lilGet(\"/bookings/myAvailableSlots\"),\n\tget: () => lilGet(\"/events/me\"),\n\tadd: (id) => lilPost(\"/bookings/bookMeIntoGame\", { gameId: Number(id) }),\n\tdelete: (id) =>\n\t\tlilDelete(\"/bookings/removeMeFromGame\", {\n\t\t\tgameId: Number(id),\n\t\t}),\n};\n\nconst favorites = {\n\tget: () => lilGet(\"/events/me/favorites\"),\n\tadd: (id) =>\n\t\tlilPost(\"/events/me/favorite/create\", {\n\t\t\teventId: Number(id),\n\t\t}),\n\tdelete: (id) =>\n\t\tlilDelete(\"/events/me/favorite/delete\", {\n\t\t\teventId: Number(id),\n\t\t}),\n};\n\nconst password = {\n\t// TODO: sort all this out and make sure it works\n\tset: (id, password) =>\n\t\tlilPost(\"/users/setMyPassword\", {\n\t\t\tuserId: Number(id),\n\t\t\tpassword: password,\n\t\t}),\n\tresetRequest: (email) =>\n\t\tlilPost(\"/users/resetPasswordRequest\", {\n\t\t\temail: email,\n\t\t}),\n\trequest: (emailAddress, emailBody, emailSubject) =>\n\t\tlilPost(\"/password/request\", {\n\t\t\temailAddress: emailAddress,\n\t\t\temailBody: emailBody,\n\t\t\temailSubject: emailSubject,\n\t\t}),\n\treset: (emailAddress, password, uuid) =>\n\t\tlilPost(\"/password/reset\", {\n\t\t\temailAddress: emailAddress,\n\t\t\tpassword: password,\n\t\t\tuuid: uuid,\n\t\t}),\n\tconfirm: (password, token) =>\n\t\tlilPost(\"/users/confirmPasswordRequest\", {\n\t\t\tpassword: password,\n\t\t\ttoken: token,\n\t\t}),\n};\n\nconst events = {\n\tme: () => lilGet(\"/events/me\"),\n\tspaces: () => lilGet(\"/events/spaces/public\"),\n\tspace: (id) => lilGet(`/events/${id}/spaces/public`),\n\tfind: (id) => lilPost(\"/events/find\", { id: Number(id) }),\n\tall: () => lilGet(\"/events/all\"),\n\tcategory: (category) => lilGet(`/events/category/${category}`),\n\tcount: () => lilGet(\"/events/count\"),\n\tcreate: (body) => lilPut(\"/users/setMyPassword\", body),\n\tuploadImage: (formData) => {\n\t\t// must contain file and eventID as formData\n\t\tlilFetch({\n\t\t\tapi: \"/events/image\",\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData,\n\t\t\tjsonStringify: false,\n\t\t});\n\t},\n\tcurrentYear: (length, offset) => lilGet(`/events/page/${length}/${offset}`),\n\tsince: (epochtime) => lilGet(`/events/since/${epochtime}`),\n\tpublic: {\n\t\tall: () => lilFetch(\"/events/all/public\"),\n\t\tcurrentYear: (length, offset) =>\n\t\t\tlilGet(`/events/page/public/${length}/${offset}`),\n\t},\n\t// priorYear \"events-for-year-controller\" which isn't as useful\n};\n\nconst admin = {\n\troles: {\n\t\tadd: (id, role) =>\n\t\t\tlilPost(\"/events/addRoleToUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t\tdelete: (id, role) =>\n\t\t\tlilPost(\"/events/removeRoleFormUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t},\n\tusers: {\n\t\tall: () => {},\n\t\tcreate: () => {},\n\t\tfindById: () => {},\n\t\tfindByEmail: () => {},\n\t\tsetPassword: () => {},\n\t},\n\tbookings: {\n\t\tadd: () => {},\n\t\tdelete: () => {},\n\t\tsetGm: () => {},\n\t},\n};\n\n/* ------------------------- Export basic functions ------------------------- */\nexport { fetcher, lilFetch, lilGet, lilPost, lilPut, lilDelete };\n\n/* -------------------------- Export user functions ------------------------- */\nexport {\n\tstatus,\n\tisAdmin,\n\tlogin,\n\tlogout,\n\tme,\n\tbookings,\n\tfavorites,\n\tpassword,\n\tevents,\n\tadmin,\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "admin", "bookings", "events", "favorites", "fetcher", "init", "isAdmin", "lilDelete", "lilFetch", "lilGet", "lilPost", "lilPut", "login", "logout", "me", "password", "status", "lilRedDefaults", "lilRedSettings", "AUTH_TOKEN", "LAST_LOGIN", "dispatch", "name", "detail", "bubbles", "url", "options", "response", "contentType", "result", "err", "lilAuth", "username", "token", "settings", "authToken", "lastLogin", "now", "daysTillLogout", "earliestAllowedLogin", "api", "body", "lilRedOptions", "id", "email", "emailAddress", "emailBody", "emailSubject", "uuid", "category", "formData", "length", "offset", "epochtime", "role"]
}
