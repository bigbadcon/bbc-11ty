{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["/* -------------------------------------------------------------------------- */\n/*                                  Variables                                 */\n/* -------------------------------------------------------------------------- */\n\n// TODO: add function for time to auto logout\n\n// Default settings\nconst lilRedDefaults = {\n\tlilRedApiUrl: null,\n\tlogoutIfStale: true,\n\tdaysTillLogout: 10,\n\tserverApiKey: null,\n};\n\n// Settings\nlet lilRedSettings;\n\n// Local storage keys\nconst AUTH_TOKEN = \"lilRedAuthToken\";\nconst LAST_LOGIN = \"lilRedLastLogin\";\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper Functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* eslint-disable no-console */\nfunction dispatch(name, detail, additional, bubbles = true) {\n\tif (typeof detail === \"string\" && /^ERROR/.test(detail)) {\n\t\t// eslint-disable-next-line no-console\n\t\tif (additional) {\n\t\t\tconsole.error(name, detail, additional);\n\t\t} else {\n\t\t\tconsole.error(name, detail, additional);\n\t\t}\n\t} else {\n\t\tif (additional) {\n\t\t\tconsole.log(name, detail);\n\t\t} else {\n\t\t\tconsole.log(name, detail);\n\t\t}\n\t}\n\tdocument.dispatchEvent(\n\t\tnew CustomEvent(name, {\n\t\t\tbubbles: bubbles,\n\t\t\tdetail: detail,\n\t\t})\n\t);\n}\n/* eslint-enable no-console */\n\n/* ------------------------- Convert odd characters ------------------------- */\nconst decodeText = (text) => {\n\ttry {\n\t\tconst windows1252 = new TextEncoder(\"windows-1251\");\n\t\tconst utf8 = new TextDecoder();\n\t\treturn text && utf8.decode(windows1252.encode(text));\n\t} catch (error) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\"decodeText: \" + error);\n\t\treturn text;\n\t}\n};\n\n/* ------------------------- Get times and duration ------------------------- */\n// TODO: add helper function to get full date string and duration\n\nconst getDurationInHours = (dateStart, dateEnd) => {\n\tdateStart = new Date(dateStart);\n\tdateEnd = new Date(dateEnd);\n\treturn (Math.abs(dateEnd - dateStart) / 1000 / 3600) % 24;\n};\n\n/* Example \n    \"eventStartTime\": \"09:00:00\",\n\t\"eventEndTime\": \"13:00:00\",\n\t\"eventStartDate\": \"2022-10-29\",\n\t\"eventEndDate\": \"2022-10-29\",\n*/\n\n// eslint-disable-next-line no-unused-vars\nfunction getDateTimeDuration(event) {\n\t// TODO: figure out how to know this is the right timezone and daylight savings time\n\t// We likely need to change the API to include timezone as without we can't be flexible\n\t// Timezone is included in the signed in version. We need to add it to the public API\n\t// Also for some reason it also includes eventStart and eventEnd as unix which would be great to have\n\tconst start = `${event.eventStartDate}T${event.eventStartTime}-07:00`;\n\tconst end = `${event.eventEndDate}T${event.eventEndTime}-07:00`;\n\treturn { start: start, end: end, duration: getDurationInHours(start, end) };\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Generic Methods                              */\n/* -------------------------------------------------------------------------- */\n\n/**\n * fetcher - basic fetch routine\n */\n// TODO: add more result options, with dispatch events, for other response status numbers\nasync function fetcher(url, options) {\n\t/* eslint-disable no-console */\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tconsole.log(`RESPONSE:lilFetch for ${url}`, response);\n\t\tif (response.status !== 200) throw new Error(`fetch fail status: ${response.status}`);\n\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t// Return JSON if it is JSON otherwise text\n\t\tconst result =\n\t\t\tcontentType && contentType.indexOf(\"application/json\") !== -1\n\t\t\t\t? await response.json()\n\t\t\t\t: await response.text();\n\t\tconsole.log(`RESULT: lilFetch for ${url}`, result);\n\t\treturn result;\n\t} catch (err) {\n\t\tdispatch(\"lil-red-fetch-error\", `ERROR: lilFetch for ${url} failed`, err);\n\t\treturn null;\n\t}\n\t/* eslint-enable no-console */\n}\n\n/**\n * lilRedAuth - lilRed Targeted Fetch\n */\nasync function lilAuth(username, password) {\n\tif (!lilRedSettings && lilRedSettings.lilRedApiUrl) return null;\n\tconst url = lilRedSettings.lilRedApiUrl + \"/login\";\n\tconst options = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json;charset=utf-8\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t}),\n\t};\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tif (response.status === 200 && response.headers.get(\"authorization\")) {\n\t\t\tconst token = response.headers.get(\"authorization\");\n\t\t\tlocalStorage.setItem(AUTH_TOKEN, token);\n\t\t\tlocalStorage.setItem(LAST_LOGIN, new Date().toISOString());\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tdispatch(\"lil-red-login\", \"success\");\n\t\t\treturn token;\n\t\t}\n\t} catch (err) {\n\t\tdispatch(\"lil-red-login\", \"fail\");\n\t\treturn null;\n\t}\n}\n\n/**\n * lilFetch - lilRed Targeted Fetch\n */\n\nasync function lilFetch(settings) {\n\t// settings = {api, method, body, jsonStringify, token, serverApiKey}\n\tsettings = { jsonStringify: true, method: \"GET\", publicMethod: false, ...settings };\n\n\tif (!lilRedSettings?.lilRedApiUrl || !settings.api) return null;\n\n\t// check if public method\n\tconst publicMethod = settings.publicMethod || settings.api === \"/\" || /public/.test(settings.api);\n\n\t// check for serverApiKey\n\tconst serverApiKey = settings.serverApiKey || lilRedSettings.serverApiKey;\n\n\t/* eslint-disable no-unused-vars */\n\tconst url = lilRedSettings.lilRedApiUrl + settings.api;\n\tconst options = {\n\t\tmethod: settings.method,\n\t\theaders: {},\n\t};\n\t// JSON string it by default; this allows for just passing a formData object if desired\n\tif (settings.jsonStringify) {\n\t\tsettings.body = settings.body && JSON.stringify(settings.body);\n\t\toptions.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n\t}\n\t// Add body if there\n\tif (settings.body) options.body = settings.body;\n\n\t// If has api is not public and there is no serverApiKey then check for authToken and add it\n\tif (!publicMethod && !settings.serverApiKey) {\n\t\t// Check for auth token\n\t\tconst authToken = settings.token || localStorage.getItem(AUTH_TOKEN);\n\n\t\tif (authToken) {\n\t\t\t// Add authorization headers\n\t\t\toptions.headers.Authorization = authToken;\n\t\t} else {\n\t\t\t// If no auth token then stop script\n\t\t\tdispatch(\"lil-red-fetch\", \"ERROR: auth token missing\");\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lilRedSettings.logoutIfStale) {\n\t\t\t// Check last login and logout if too old\n\t\t\tconst lastLogin = Date.parse(localStorage.getItem(LAST_LOGIN));\n\t\t\tconst now = new Date();\n\t\t\tconst daysTillLogout = lilRedSettings.daysTillLogout || 10;\n\t\t\tconst earliestAllowedLogin = Date.parse(new Date(now.setDate(now.getDate() - daysTillLogout)));\n\t\t\tconst isStale = isNaN(lastLogin) || isNaN(earliestAllowedLogin) || lastLogin < earliestAllowedLogin;\n\n\t\t\tif (isStale) {\n\t\t\t\tdispatch(\"lil-red-fetch\", `ERROR: auth token stale. Last Login: ${lastLogin}`);\n\t\t\t\tlogout();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Add authorization headers\n\t\toptions.headers.Authorization = authToken;\n\t}\n\n\t// If it is not a public method and there is a serverApiKey then use that\n\tif (!publicMethod && serverApiKey) {\n\t\toptions.headers[\"x-api-key\"] = serverApiKey;\n\t}\n\n\tlet response = await fetcher(url, options);\n\treturn response;\n}\n\n/**\n * lilGet - shorthand\n */\n\nconst lilGet = (api, settings) => lilFetch({ api: api, ...settings });\n\n/**\n * lilPost - shorthand\n */\nconst lilPost = (api, body, settings) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"POST\",\n\t\tbody: body,\n\t\t...settings,\n\t});\n\n/**\n * lilPut - shorthand\n */\nconst lilPut = (api, body, settings) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"PUT\",\n\t\tbody: body,\n\t\t...settings,\n\t});\n\n/**\n * lilDelete - shorthandte\n */\nconst lilDelete = (api, body, settings) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"DELETE\",\n\t\tbody: body,\n\t\t...settings,\n\t});\n\n/* -------------------------------------------------------------------------- */\n/*                      Main LilRed Public Functions                          */\n/* -------------------------------------------------------------------------- */\n\nexport async function init(lilRedOptions) {\n\t// remove any currently running instances\n\tdestroy();\n\t// Merge user options with defaults\n\tlilRedSettings = { ...lilRedDefaults, ...lilRedOptions };\n\n\t// eslint-disable-next-line\n\tconsole.log(\"\uD83D\uDC3A Initializing LilRed\", lilRedSettings);\n\tdispatch(\"lil-red-init\", `Initializing Lil Red: ${lilRedSettings.lilRedApiUrl}`);\n\t// Check status\n\treturn await status();\n}\n\nexport function destroy() {\n\t// add code to deinitialize function\n\tconst oldApiUrl = lilRedSettings?.lilRedApiUrl;\n\tlilRedSettings = lilRedDefaults;\n\tif (oldApiUrl) {\n\t\t// dispatch only if there was an api url initialized\n\t\tdispatch(\"lil-red-destroy\", `Deinitialized -- no longer using ${oldApiUrl}`);\n\t}\n}\n\n/* ---------------------- Check Status of Data Service ---------------------- */\n\nconst status = async () => {\n\tconst result = await lilGet(\"/\");\n\tdispatch(\"lil-red-status\", result);\n\treturn result;\n};\n\n/* ------------------------------ Login Methods ----------------------------- */\n\nconst login = (username, password) => lilAuth(username, password);\nconst logout = () => {\n\t// eslint-disable-next-line no-console\n\tdispatch(\"lil-red-logout\", \"You have been logged out of Lil Red\");\n\tlocalStorage.removeItem(AUTH_TOKEN);\n\tlocalStorage.removeItem(LAST_LOGIN);\n};\n\n/* --------------------------- Basic User Methods --------------------------- */\n\nconst isAdmin = () => lilGet(\"/users/me/isadmin\");\nconst me = () => lilGet(\"/users/me\");\n\n// This function has a dual use. You can feed it the already downloaded user data and it will give you the roles or it will download it\n// TODO: ideally the user data improves and we don't need this.\nconst roles = async (user) => {\n\tuser = user || (await lilGet(\"/users/me\"));\n\tconst capabilities = user.metadata.find((md) => /capabilities/.test(md.metaKey)).metaValue;\n\tconst roles = [...capabilities.matchAll(/\"([a-z-]+)/g)].map((match) => match[1]);\n\treturn roles;\n};\n\n/* ----------------------------- Booking Methods ---------------------------- */\n\nconst bookings = {\n\tslots: () => lilGet(\"/bookings/myAvailableSlots\"),\n\tget: () => lilGet(\"/events/me\"),\n\tadd: (id) => lilPost(\"/bookings/bookMeIntoGame\", { gameId: Number(id) }),\n\tdelete: (id) =>\n\t\tlilDelete(\"/bookings/removeMeFromGame\", {\n\t\t\tgameId: Number(id),\n\t\t}),\n};\n\n/* ---------------------------- Favorites Methods --------------------------- */\n\nconst favorites = {\n\tget: () => lilGet(\"/events/me/favorites\"),\n\tadd: (id) =>\n\t\tlilPost(\"/events/me/favorite/create\", {\n\t\t\teventId: Number(id),\n\t\t}),\n\tdelete: (id) =>\n\t\tlilDelete(\"/events/me/favorite/delete\", {\n\t\t\teventId: Number(id),\n\t\t}),\n};\n\n/* ---------------------------- Password methods ---------------------------- */\n\nconst password = {\n\t// TODO: sort all this out and make sure it works\n\tset: (id, password) =>\n\t\tlilPost(\"/users/setMyPassword\", {\n\t\t\tuserId: Number(id),\n\t\t\tpassword: password,\n\t\t}),\n\trequestReset: (email) =>\n\t\tlilPost(\"/users/resetPasswordRequest\", {\n\t\t\temail: email,\n\t\t}),\n\tmailRequest: (emailAddress, emailBody, emailSubject) =>\n\t\tlilPost(\"/password/request\", {\n\t\t\temailAddress: emailAddress,\n\t\t\temailBody: emailBody,\n\t\t\temailSubject: emailSubject,\n\t\t}),\n\treset: (emailAddress, password, uuid) =>\n\t\tlilPost(\"/password/reset\", {\n\t\t\temailAddress: emailAddress,\n\t\t\tpassword: password,\n\t\t\tuuid: uuid,\n\t\t}),\n\tconfirm: (password, token) =>\n\t\tlilPost(\"/users/confirmPasswordRequest\", {\n\t\t\tpassword: password,\n\t\t\ttoken: token,\n\t\t}),\n};\n\n/* ----------------------------- Events Methods ----------------------------- */\n\nconst events = {\n\tme: () => lilGet(\"/events/me\"),\n\tfind: (id) => lilPost(\"/events/find\", { id: Number(id) }),\n\tall: () => lilGet(\"/events/all\"),\n\tcategory: (category) => lilGet(`/events/category/${category}`),\n\tcount: () => lilGet(\"/events/count\"),\n\tcreate: (body) => lilPut(\"/users/setMyPassword\", body),\n\tuploadImage: (formData) => {\n\t\t// must contain file and eventID as formData\n\t\tlilFetch({\n\t\t\tapi: \"/events/image\",\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData,\n\t\t\tjsonStringify: false,\n\t\t});\n\t},\n\tcurrentYear: (length, offset) => lilGet(`/events/page/${length}/${offset}`),\n\tsince: (epochtime) => lilGet(`/events/since/${epochtime}`),\n\tpublic: {\n\t\tall: () => lilGet(\"/events/all/public\"),\n\t\tcurrentYear: (length, offset) => lilGet(`/events/page/public/${length}/${offset}`),\n\t\tspaces: () => lilGet(\"/events/spaces/public\"),\n\t\tspace: (id) => lilGet(`/events/${id}/spaces/public`),\n\t\tcategories: async (events) => {\n\t\t\t// Supplying the public events data is the better way to go but it will grab it if needed\n\t\t\tevents = events || (await lilGet(\"/events/all/public\"));\n\t\t\tconst allCategories = events.reduce((acc, cur) => {\n\t\t\t\tconst simpleArray = cur.categories.map((cat) => cat.name) || [];\n\t\t\t\treturn [...acc, ...simpleArray];\n\t\t\t}, []);\n\t\t\tconst uniqueCategories = [...new Set(allCategories)];\n\t\t\treturn uniqueCategories;\n\t\t},\n\t},\n\t// TODO: add priorYear? \"events-for-year-controller\" which isn't as useful\n};\n\n/* --------------------------- Admin Only Methods --------------------------- */\n\nconst admin = {\n\troles: {\n\t\tadd: (id, role) =>\n\t\t\tlilPost(\"/events/addRoleToUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t\tdelete: (id, role) =>\n\t\t\tlilPost(\"/events/removeRoleFormUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t},\n\tusers: {\n\t\tall: () => lilGet(\"/users/all\"),\n\t\tcreate: (body) => lilPut(\"/users/create\", body),\n\t\tfindById: (id) => lilGet(`/users/id/${id}`),\n\t\tfindByEmail: (email) => lilGet(`/users/email/${email}`),\n\t\tsetPassword: (id, password) => lilPost(\"/users/setPassword\", { password: password, userId: id }),\n\t},\n\tbookings: {\n\t\tadd: () => {},\n\t\tdelete: () => {},\n\t\tsetGm: () => {},\n\t},\n};\n\n/* ------------------------- Useful helper functions ------------------------ */\nexport { decodeText };\n\n/* ------------------------- Export basic functions ------------------------- */\nexport { fetcher, lilFetch, lilGet, lilPost, lilPut, lilDelete };\n\n/* -------------------------- Export other lilRed functions ------------------------- */\nexport { status, isAdmin, login, logout, me, roles, bookings, favorites, password, events, admin };\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "admin", "bookings", "decodeText", "destroy", "events", "favorites", "fetcher", "init", "isAdmin", "lilDelete", "lilFetch", "lilGet", "lilPost", "lilPut", "login", "logout", "me", "password", "roles", "status", "lilRedDefaults", "lilRedSettings", "AUTH_TOKEN", "LAST_LOGIN", "dispatch", "name", "detail", "additional", "bubbles", "text", "windows1252", "utf8", "error", "fetcher", "url", "options", "response", "contentType", "result", "err", "dispatch", "lilAuth", "username", "password", "lilRedSettings", "token", "AUTH_TOKEN", "LAST_LOGIN", "lilFetch", "settings", "publicMethod", "serverApiKey", "authToken", "lastLogin", "now", "daysTillLogout", "earliestAllowedLogin", "logout", "lilGet", "api", "lilPost", "body", "lilPut", "lilDelete", "init", "lilRedOptions", "destroy", "lilRedDefaults", "status", "oldApiUrl", "login", "isAdmin", "me", "roles", "user", "md", "match", "bookings", "id", "favorites", "email", "emailAddress", "emailBody", "emailSubject", "uuid", "events", "category", "formData", "length", "offset", "epochtime", "allCategories", "acc", "cur", "simpleArray", "cat", "admin", "role"]
}
