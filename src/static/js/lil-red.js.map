{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["/* -------------------------------------------------------------------------- */\n/*                                  Variables                                 */\n/* -------------------------------------------------------------------------- */\n\n// TODO: add function for time to auto logout\n\n// Default settings\nconst lilRedDefaults = {\n\tlilRedApiUrl: null,\n\tlogoutIfStale: true,\n\tdaysTillLogout: 10,\n\tserverApiKey: null,\n};\n\n// Settings\nlet lilRedSettings;\n\n// Local storage keys\nconst AUTH_TOKEN = \"lilRedAuthToken\";\nconst LAST_LOGIN = \"lilRedLastLogin\";\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper Functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* eslint-disable no-console */\nfunction dispatch(name, detail, additional, bubbles = true) {\n\tif (typeof detail === \"string\" && /^ERROR/.test(detail)) {\n\t\t// eslint-disable-next-line no-console\n\t\tif (additional) {\n\t\t\tconsole.error(name, detail, additional);\n\t\t} else {\n\t\t\tconsole.error(name, detail, additional);\n\t\t}\n\t} else {\n\t\tif (additional) {\n\t\t\tconsole.log(name, detail);\n\t\t} else {\n\t\t\tconsole.log(name, detail);\n\t\t}\n\t}\n\tdocument.dispatchEvent(\n\t\tnew CustomEvent(name, {\n\t\t\tbubbles: bubbles,\n\t\t\tdetail: detail,\n\t\t})\n\t);\n}\n/* eslint-enable no-console */\n\n/* ------------------------- Convert odd characters ------------------------- */\nconst decodeText = (text) => {\n\ttry {\n\t\tconst windows1252 = new TextEncoder(\"windows-1251\");\n\t\tconst utf8 = new TextDecoder();\n\t\treturn text && utf8.decode(windows1252.encode(text));\n\t} catch (error) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\"decodeText: \" + error);\n\t\treturn text;\n\t}\n};\n\n/* ------------------------- Get times and duration ------------------------- */\n// TODO: add helper function to get full date string and duration\n\nconst getDurationInHours = (dateStart, dateEnd) => {\n\tdateStart = new Date(dateStart);\n\tdateEnd = new Date(dateEnd);\n\treturn (Math.abs(dateEnd - dateStart) / 1000 / 3600) % 24;\n};\n\n/* Example \n    \"eventStartTime\": \"09:00:00\",\n\t\"eventEndTime\": \"13:00:00\",\n\t\"eventStartDate\": \"2022-10-29\",\n\t\"eventEndDate\": \"2022-10-29\",\n*/\n\n// eslint-disable-next-line no-unused-vars\nfunction getDateTimeDuration(event) {\n\t// TODO: figure out how to know this is the right timezone and daylight savings time\n\t// We likely need to change the API to include timezone as without we can't be flexible\n\t// Timezone is included in the signed in version. We need to add it to the public API\n\t// Also for some reason it also includes eventStart and eventEnd as unix which would be great to have\n\tconst start = `${event.eventStartDate}T${event.eventStartTime}-07:00`;\n\tconst end = `${event.eventEndDate}T${event.eventEndTime}-07:00`;\n\treturn { start: start, end: end, duration: getDurationInHours(start, end) };\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Generic Methods                              */\n/* -------------------------------------------------------------------------- */\n\n/**\n * fetcher - basic fetch routine\n */\n// TODO: add more result options, with dispatch events, for other response status numbers\nasync function fetcher(url, options) {\n\t/* eslint-disable no-console */\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tconsole.log(`RESPONSE:lilFetch for ${url}`, response);\n\t\tif (response.status !== 200) throw new Error(`fetch fail status: ${response.status}`);\n\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t// Return JSON if it is JSON otherwise text\n\t\tconst result =\n\t\t\tcontentType && contentType.indexOf(\"application/json\") !== -1\n\t\t\t\t? await response.json()\n\t\t\t\t: await response.text();\n\t\tconsole.log(`RESULT: lilFetch for ${url}`, result);\n\t\treturn result;\n\t} catch (err) {\n\t\tdispatch(\"lil-red-fetch-error\", `ERROR: lilFetch for ${url} failed`, err);\n\t\treturn null;\n\t}\n\t/* eslint-enable no-console */\n}\n\n/**\n * lilRedAuth - lilRed Targeted Fetch\n */\nasync function lilAuth(username, password) {\n\tif (!lilRedSettings && lilRedSettings.lilRedApiUrl) return null;\n\tconst url = lilRedSettings.lilRedApiUrl + \"/login\";\n\tconst options = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json;charset=utf-8\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t}),\n\t};\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tif (response.status === 200 && response.headers.get(\"authorization\")) {\n\t\t\tconst token = response.headers.get(\"authorization\");\n\t\t\tlocalStorage.setItem(AUTH_TOKEN, token);\n\t\t\tlocalStorage.setItem(LAST_LOGIN, new Date().toISOString());\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tdispatch(\"lil-red-login\", \"success\");\n\t\t\treturn token;\n\t\t}\n\t} catch (err) {\n\t\tdispatch(\"lil-red-login\", \"fail\");\n\t\treturn null;\n\t}\n}\n\n/**\n * lilFetch - lilRed Targeted Fetch\n */\n\nasync function lilFetch(settings) {\n\t// settings = {api, method, body, jsonStringify, token, serverApiKey}\n\tsettings = { jsonStringify: true, method: \"GET\", publicMethod: false, ...settings };\n\n\tif (!lilRedSettings?.lilRedApiUrl || !settings.api) return null;\n\n\t// check if public method\n\tconst publicMethod = settings.publicMethod || settings.api === \"/\" || /public/.test(settings.api);\n\n\t// check for serverApiKey\n\tconst serverApiKey = settings.serverApiKey || lilRedSettings.serverApiKey;\n\n\t/* eslint-disable no-unused-vars */\n\tconst url = lilRedSettings.lilRedApiUrl + settings.api;\n\tconst options = {\n\t\tmethod: settings.method,\n\t\theaders: {},\n\t};\n\t// JSON string it by default; this allows for just passing a formData object if desired\n\tif (settings.jsonStringify) {\n\t\tsettings.body = settings.body && JSON.stringify(settings.body);\n\t\toptions.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n\t}\n\t// Add body if there\n\tif (settings.body) options.body = settings.body;\n\n\t// If has api is not public and there is no serverApiKey then check for authToken and add it\n\tif (!publicMethod && !settings.serverApiKey) {\n\t\t// Check for auth token\n\t\tconst authToken = settings.token || localStorage.getItem(AUTH_TOKEN);\n\n\t\tif (authToken) {\n\t\t\t// Add authorization headers\n\t\t\toptions.headers.Authorization = authToken;\n\t\t} else {\n\t\t\t// If no auth token then stop script\n\t\t\tdispatch(\"lil-red-fetch\", \"ERROR: auth token missing\");\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lilRedSettings.logoutIfStale) {\n\t\t\t// Check last login and logout if too old\n\t\t\tconst lastLogin = Date.parse(localStorage.getItem(LAST_LOGIN));\n\t\t\tconst now = new Date();\n\t\t\tconst daysTillLogout = lilRedSettings.daysTillLogout || 10;\n\t\t\tconst earliestAllowedLogin = Date.parse(new Date(now.setDate(now.getDate() - daysTillLogout)));\n\t\t\tconst isStale = isNaN(lastLogin) || isNaN(earliestAllowedLogin) || lastLogin < earliestAllowedLogin;\n\n\t\t\tif (isStale) {\n\t\t\t\tdispatch(\"lil-red-fetch\", `ERROR: auth token stale. Last Login: ${lastLogin}`);\n\t\t\t\tlogout();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Add authorization headers\n\t\toptions.headers.Authorization = authToken;\n\t}\n\n\t// If it is not a public method and there is a serverApiKey then use that\n\tif (!publicMethod && serverApiKey) {\n\t\toptions.headers[\"x-api-key\"] = serverApiKey;\n\t}\n\n\tlet response = await fetcher(url, options);\n\treturn response;\n}\n\n/**\n * lilGet - shorthand\n */\n\nconst lilGet = (api, settings) => lilFetch({ api: api, ...settings });\n\n/**\n * lilPost - shorthand\n */\nconst lilPost = (api, body, settings) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"POST\",\n\t\tbody: body,\n\t\t...settings,\n\t});\n\n/**\n * lilPut - shorthand\n */\nconst lilPut = (api, body, settings) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"PUT\",\n\t\tbody: body,\n\t\t...settings,\n\t});\n\n/**\n * lilDelete - shorthandte\n */\nconst lilDelete = (api, body, settings) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"DELETE\",\n\t\tbody: body,\n\t\t...settings,\n\t});\n\n/* -------------------------------------------------------------------------- */\n/*                      Main LilRed Public Functions                          */\n/* -------------------------------------------------------------------------- */\n\nexport async function init(lilRedOptions) {\n\t// remove any currently running instances\n\tdestroy();\n\t// Merge user options with defaults\n\tlilRedSettings = { ...lilRedDefaults, ...lilRedOptions };\n\n\t// eslint-disable-next-line\n\tconsole.log(\"\uD83D\uDC3A Initializing LilRed\", lilRedSettings);\n\tdispatch(\"lil-red-init\", `Initializing Lil Red: ${lilRedSettings.lilRedApiUrl}`);\n\t// Check status\n\treturn await status();\n}\n\nexport function destroy() {\n\t// add code to deinitialize function\n\tconst oldApiUrl = lilRedSettings?.lilRedApiUrl;\n\tlilRedSettings = lilRedDefaults;\n\tif (oldApiUrl) {\n\t\t// dispatch only if there was an api url initialized\n\t\tdispatch(\"lil-red-destroy\", `Deinitialized -- no longer using ${oldApiUrl}`);\n\t}\n}\n\n/* ---------------------- Check Status of Data Service ---------------------- */\n\nconst status = async () => {\n\tconst result = await lilGet(\"/\");\n\tdispatch(\"lil-red-status\", result);\n\treturn result;\n};\n\n/* ------------------------------ Login Methods ----------------------------- */\n\nconst login = (username, password) => lilAuth(username, password);\nconst logout = () => {\n\t// eslint-disable-next-line no-console\n\tdispatch(\"lil-red-logout\", \"You have been logged out of Lil Red\");\n\tlocalStorage.removeItem(AUTH_TOKEN);\n\tlocalStorage.removeItem(LAST_LOGIN);\n};\n\n/* --------------------------- Basic User Methods --------------------------- */\n\nconst isAdmin = () => lilGet(\"/users/me/isadmin\");\nconst me = () => lilGet(\"/users/me\");\n\n// This function has a dual use. You can feed it the already downloaded user data and it will give you the roles or it will download it\n// TODO: ideally the user data improves and we don't need this.\nconst roles = async (user) => {\n\tuser = user || (await lilGet(\"/users/me\"));\n\tconst capabilities = user.metadata.find((md) => /capabilities/.test(md.metaKey)).metaValue;\n\tconst roles = [...capabilities.matchAll(/\"([a-z-]+)/g)].map((match) => match[1]);\n\treturn roles;\n};\n\n/* ----------------------------- Booking Methods ---------------------------- */\n\nconst bookings = {\n\tslots: () => lilGet(\"/bookings/myAvailableSlots\"),\n\tget: () => lilGet(\"/events/me\"),\n\tadd: (id) => lilPost(\"/bookings/bookMeIntoGame\", { gameId: Number(id) }),\n\tdelete: (id) =>\n\t\tlilDelete(\"/bookings/removeMeFromGame\", {\n\t\t\tgameId: Number(id),\n\t\t}),\n\tevent: async (id, event) => {\n\t\t// This is a dual function that gets the bookings and gm(s) for the event, either using the passed along event data or getting it from the API\n\t\tif (!event) event = await events.find(id);\n\t\t// filter out canceled bookings and fix name issues with odd characters\n\t\tconst bookings = event.bookings\n\t\t\t.filter((booking) => booking.bookingStatus === 1)\n\t\t\t.map((booking) => {\n\t\t\t\treturn {\n\t\t\t\t\t...booking,\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t...booking.user,\n\t\t\t\t\t\tdisplayName: decodeText(booking.user.displayName),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\t\tconst facilitator =\n\t\t\tbookings\n\t\t\t\t.filter((booking) => booking.bookingComment)\n\t\t\t\t.sort((a, b) => a.user.displayName.localeCompare(b.user.displayName)) || [];\n\t\tconst attendees =\n\t\t\tbookings\n\t\t\t\t.filter((booking) => !booking.bookingComment)\n\t\t\t\t.sort((a, b) => a.user.displayName.localeCompare(b.user.displayName)) || [];\n\n\t\treturn {\n\t\t\tfacilitator: facilitator,\n\t\t\tattendees: attendees,\n\t\t};\n\t},\n};\n\n/* ---------------------------- Favorites Methods --------------------------- */\n\nconst favorites = {\n\tget: () => lilGet(\"/events/me/favorites\"),\n\tadd: (id) =>\n\t\tlilPost(\"/events/me/favorite/create\", {\n\t\t\teventId: Number(id),\n\t\t}),\n\tdelete: (id) =>\n\t\tlilDelete(\"/events/me/favorite/delete\", {\n\t\t\teventId: Number(id),\n\t\t}),\n};\n\n/* ---------------------------- Password methods ---------------------------- */\n\nconst password = {\n\t// TODO: sort all this out and make sure it works\n\tset: (id, password) =>\n\t\tlilPost(\"/users/setMyPassword\", {\n\t\t\tuserId: Number(id),\n\t\t\tpassword: password,\n\t\t}),\n\trequestReset: (email) =>\n\t\tlilPost(\"/users/resetPasswordRequest\", {\n\t\t\temail: email,\n\t\t}),\n\tmailRequest: (emailAddress, emailBody, emailSubject) =>\n\t\tlilPost(\"/password/request\", {\n\t\t\temailAddress: emailAddress,\n\t\t\temailBody: emailBody,\n\t\t\temailSubject: emailSubject,\n\t\t}),\n\treset: (emailAddress, password, uuid) =>\n\t\tlilPost(\"/password/reset\", {\n\t\t\temailAddress: emailAddress,\n\t\t\tpassword: password,\n\t\t\tuuid: uuid,\n\t\t}),\n\tconfirm: (password, token) =>\n\t\tlilPost(\"/users/confirmPasswordRequest\", {\n\t\t\tpassword: password,\n\t\t\ttoken: token,\n\t\t}),\n};\n\n/* ----------------------------- Events Methods ----------------------------- */\n\nconst events = {\n\tme: () => lilGet(\"/events/me\"),\n\tfind: (id) => lilPost(\"/events/find\", { id: Number(id) }),\n\tall: () => lilGet(\"/events/all\"),\n\tcategory: (category) => lilGet(`/events/category/${category}`),\n\tcount: () => lilGet(\"/events/count\"),\n\tcreate: (body) => lilPut(\"/users/setMyPassword\", body),\n\tuploadImage: (formData) => {\n\t\t// must contain file and eventID as formData\n\t\tlilFetch({\n\t\t\tapi: \"/events/image\",\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData,\n\t\t\tjsonStringify: false,\n\t\t});\n\t},\n\tcurrentYear: (length, offset) => lilGet(`/events/page/${length}/${offset}`),\n\tsince: (epochtime) => lilGet(`/events/since/${epochtime}`),\n\tpublic: {\n\t\tall: () => lilGet(\"/events/all/public\"),\n\t\tcurrentYear: (length, offset) => lilGet(`/events/page/public/${length}/${offset}`),\n\t\tspaces: () => lilGet(\"/events/spaces/public\"),\n\t\tspace: (id) => lilGet(`/events/${id}/spaces/public`),\n\t\tcategories: async (events) => {\n\t\t\t// Supplying the public events data is the better way to go but it will grab it if needed\n\t\t\tevents = events || (await lilGet(\"/events/all/public\"));\n\t\t\tconst allCategories = events.reduce((acc, cur) => {\n\t\t\t\tconst simpleArray = cur.categories.map((cat) => cat.name) || [];\n\t\t\t\treturn [...acc, ...simpleArray];\n\t\t\t}, []);\n\t\t\tconst uniqueCategories = [...new Set(allCategories)];\n\t\t\treturn uniqueCategories;\n\t\t},\n\t},\n\t// TODO: add priorYear? \"events-for-year-controller\" which isn't as useful\n};\n\n/* --------------------------- Admin Only Methods --------------------------- */\n\nconst admin = {\n\troles: {\n\t\tadd: (id, role) =>\n\t\t\tlilPost(\"/events/addRoleToUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t\tdelete: (id, role) =>\n\t\t\tlilPost(\"/events/removeRoleFormUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t},\n\tusers: {\n\t\tall: () => lilGet(\"/users/all\"),\n\t\tcreate: (body) => lilPut(\"/users/create\", body),\n\t\tfindById: (id) => lilGet(`/users/id/${id}`),\n\t\tfindByEmail: (email) => lilGet(`/users/email/${email}`),\n\t\tsetPassword: (id, password) => lilPost(\"/users/setPassword\", { password: password, userId: id }),\n\t},\n\tbookings: {\n\t\tadd: () => {},\n\t\tdelete: () => {},\n\t\tsetGm: () => {},\n\t},\n};\n\n/* ------------------------- Useful helper functions ------------------------ */\nexport { decodeText };\n\n/* ------------------------- Export basic functions ------------------------- */\nexport { fetcher, lilFetch, lilGet, lilPost, lilPut, lilDelete };\n\n/* -------------------------- Export other lilRed functions ------------------------- */\nexport { status, isAdmin, login, logout, me, roles, bookings, favorites, password, events, admin };\n"],
  "mappings": "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",
  "names": ["password", "roles", "bookings", "events"]
}
