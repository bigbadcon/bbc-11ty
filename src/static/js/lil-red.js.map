{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["/* -------------------------------------------------------------------------- */\n/*                                  Variables                                 */\n/* -------------------------------------------------------------------------- */\n\n// TODO: add function for time to auto logout\n\n// Default settings\nconst lilRedDefaults = {\n\tlilRedApiUrl: null,\n\tlogoutIfStale: true,\n\tdaysTillLogout: 10,\n};\n\n// Settings\nlet lilRedSettings;\n\n// Local storage keys\nconst AUTH_TOKEN = \"lilRedAuthToken\";\nconst LAST_LOGIN = \"lilRedLastLogin\";\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper Functions                              */\n/* -------------------------------------------------------------------------- */\n\nfunction dispatch(name, detail, bubbles = true) {\n\tif (typeof detail === \"string\" && /^ERROR/.test(detail)) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(name, detail);\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(name, detail);\n\t}\n\tdocument.dispatchEvent(\n\t\tnew CustomEvent(name, {\n\t\t\tbubbles: bubbles,\n\t\t\tdetail: detail,\n\t\t})\n\t);\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Private Methods                              */\n/* -------------------------------------------------------------------------- */\n\n/**\n * fetcher - basic fetch routine\n * @private\n */\nasync function fetcher(url, options) {\n\t/* eslint-disable no-console */\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tconsole.log(`RESPONSE:lilFetch for ${url}`, response);\n\t\tif (response.status !== 200)\n\t\t\tthrow new Error(`fetch fail status: ${response.status}`);\n\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t// Return JSON if it is JSON otherwise text\n\t\tconst result =\n\t\t\tcontentType && contentType.indexOf(\"application/json\") !== -1\n\t\t\t\t? await response.json()\n\t\t\t\t: await response.text();\n\t\tconsole.log(`RESULT:lilFetch for ${url}`, result);\n\t\treturn result;\n\t} catch (err) {\n\t\tconsole.error(`ERROR:lilFetch for ${url}`, err);\n\t\treturn null;\n\t}\n\t/* eslint-enable no-console */\n}\n\n/**\n * lilRedAuth - lilRed Targeted Fetch\n * @private\n */\nasync function lilAuth(username, password) {\n\tif (!lilRedSettings && lilRedSettings.lilRedApiUrl) return false;\n\tconst url = lilRedSettings.lilRedApiUrl + \"/login\";\n\tconst options = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json;charset=utf-8\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t}),\n\t};\n\ttry {\n\t\tlet response = await fetch(url, options);\n\t\tif (response.status === 200 && response.headers.get(\"authorization\")) {\n\t\t\tconst token = response.headers.get(\"authorization\");\n\t\t\tlocalStorage.setItem(AUTH_TOKEN, token);\n\t\t\tlocalStorage.setItem(LAST_LOGIN, new Date().toISOString());\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tdispatch(\"lilRed_login\", \"success\");\n\t\t\treturn token;\n\t\t}\n\t} catch (err) {\n\t\tdispatch(\"lilRed_login\", \"fail\");\n\t\treturn null;\n\t}\n}\n\n/**\n * lilFetch - lilRed Targeted Fetch\n * @private\n */\n\nasync function lilFetch(settings) {\n\t// settings = {api,method,body,jsonStringify,token}\n\tsettings = { jsonStringify: true, method: \"GET\", ...settings };\n\n\tif (!lilRedSettings && lilRedSettings.lilRedApiUrl) return false;\n\n\tif (!lilRedSettings.lilRedApiUrl || !settings.api) return false;\n\n\t/* eslint-disable no-unused-vars */\n\tconst url = lilRedSettings.lilRedApiUrl + settings.api;\n\tconst options = {\n\t\tmethod: settings.method,\n\t\theaders: {},\n\t};\n\t// JSON string it by default; this allows for just passing a formData object if desired\n\tif (settings.jsonStringify) {\n\t\tsettings.body = settings.body && JSON.stringify(settings.body);\n\t\toptions.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n\t}\n\t// Add body if there\n\tif (settings.body) options.body = settings.body;\n\t// If has api is more than just the base and it is not public access, then add authorization headers token\n\tif (settings.api !== \"/\" && !/public/.test(settings.api)) {\n\t\t// Check for auth token\n\t\tconst authToken =\n\t\t\tsettings.token ||\n\t\t\tlilRedSettings.token ||\n\t\t\tlocalStorage.getItem(AUTH_TOKEN);\n\n\t\tif (authToken) {\n\t\t\t// Add authorization headers\n\t\t\toptions.headers.Authorization = authToken;\n\t\t} else {\n\t\t\t// If no auth token then stop script\n\t\t\tdispatch(\"lilRed_lilFetch\", \"ERROR: auth token missing\");\n\t\t\treturn null;\n\t\t}\n\n\t\tif (lilRedSettings.logoutIfStale) {\n\t\t\t// Check last login and logout if too old\n\t\t\tconst lastLogin = Date.parse(localStorage.getItem(LAST_LOGIN));\n\t\t\tconst now = new Date();\n\t\t\tconst daysTillLogout = lilRedSettings.daysTillLogout || 10;\n\t\t\tconst earliestAllowedLogin = Date.parse(\n\t\t\t\tnew Date(now.setDate(now.getDate() - daysTillLogout))\n\t\t\t);\n\t\t\tconst isStale =\n\t\t\t\tisNaN(lastLogin) ||\n\t\t\t\tisNaN(earliestAllowedLogin) ||\n\t\t\t\tlastLogin < earliestAllowedLogin;\n\n\t\t\tif (isStale) {\n\t\t\t\tdispatch(\n\t\t\t\t\t\"lilRed_lilFetch\",\n\t\t\t\t\t`ERROR: auth token stale. Last Login: ${lastLogin}`\n\t\t\t\t);\n\t\t\t\tlogout();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Add authorization headers\n\t\toptions.headers.Authorization = authToken;\n\t}\n\n\tlet response = await fetcher(url, options);\n\treturn response;\n}\n\n/**\n * lilGet - shorthand\n * @private\n */\n\nconst lilGet = (api, token) => lilFetch({ api: api, token: token });\n\n/**\n * lilPost - shorthand\n * @private\n */\nconst lilPost = (api, body, token) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"POST\",\n\t\tbody: body,\n\t\ttoken: token,\n\t});\n\n/**\n * lilPut - shorthand\n * @private\n */\nconst lilPut = (api, body, token) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"PUT\",\n\t\tbody: body,\n\t\ttoken: token,\n\t});\n\n/**\n * lilDelete - shorthand\n * @private\n */\nconst lilDelete = (api, body, token) =>\n\tlilFetch({\n\t\tapi: api,\n\t\tmethod: \"DELETE\",\n\t\tbody: body,\n\t\ttoken: token,\n\t});\n\n/* -------------------------------------------------------------------------- */\n/*                      Main LilRed Public Functions                          */\n/* -------------------------------------------------------------------------- */\n\nexport function init(lilRedOptions) {\n\t// Merge user options with defaults\n\t// settings = extend(defaults, options || {});\n\tlilRedSettings = { ...lilRedDefaults, ...lilRedOptions };\n\n\t// eslint-disable-next-line\n\tconsole.log(\"\uD83D\uDC3A Initializing Lil Red Fetch\", lilRedSettings);\n\n\t// Code goes here...\n\t//\n}\n\nconst status = async () => {\n\tconst result = await lilGet(\"/\");\n\tdispatch(\"lilRed_status\", result);\n\treturn result;\n};\nconst isAdmin = () => lilGet(\"/users/me/isadmin\");\nconst login = (username, password) => lilAuth(username, password);\nconst logout = () => {\n\t// eslint-disable-next-line no-console\n\tdispatch(\"lilRed_logout\", \"You have been logged out of Lil Red\");\n\tlocalStorage.removeItem(AUTH_TOKEN);\n\tlocalStorage.removeItem(LAST_LOGIN);\n};\nconst me = () => lilGet(\"/users/me\");\n\nconst bookings = {\n\tslots: () => lilGet(\"/bookings/myAvailableSlots\"),\n\tget: () => lilGet(\"/events/me\"),\n\tadd: (id) => lilPost(\"/bookings/bookMeIntoGame\", { gameId: Number(id) }),\n\tdelete: (id) =>\n\t\tlilDelete(\"/bookings/removeMeFromGame\", {\n\t\t\tgameId: Number(id),\n\t\t}),\n};\n\nconst favorites = {\n\tget: () => lilGet(\"/events/me/favorites\"),\n\tadd: (id) =>\n\t\tlilPost(\"/events/me/favorite/create\", {\n\t\t\teventId: Number(id),\n\t\t}),\n\tdelete: (id) =>\n\t\tlilDelete(\"/events/me/favorite/delete\", {\n\t\t\teventId: Number(id),\n\t\t}),\n};\n\nconst password = {\n\t// TODO: sort all this out and make sure it works\n\tset: (id, password) =>\n\t\tlilPost(\"/users/setMyPassword\", {\n\t\t\tuserId: Number(id),\n\t\t\tpassword: password,\n\t\t}),\n\tresetRequest: (email) =>\n\t\tlilPost(\"/users/resetPasswordRequest\", {\n\t\t\temail: email,\n\t\t}),\n\trequest: (emailAddress, emailBody, emailSubject) =>\n\t\tlilPost(\"/password/request\", {\n\t\t\temailAddress: emailAddress,\n\t\t\temailBody: emailBody,\n\t\t\temailSubject: emailSubject,\n\t\t}),\n\treset: (emailAddress, password, uuid) =>\n\t\tlilPost(\"/password/reset\", {\n\t\t\temailAddress: emailAddress,\n\t\t\tpassword: password,\n\t\t\tuuid: uuid,\n\t\t}),\n\tconfirm: (password, token) =>\n\t\tlilPost(\"/users/confirmPasswordRequest\", {\n\t\t\tpassword: password,\n\t\t\ttoken: token,\n\t\t}),\n};\n\nconst events = {\n\tme: () => lilGet(\"/events/me\"),\n\tspaces: () => lilGet(\"/events/spaces/public\"),\n\tspace: (id) => lilGet(`/events/${id}/spaces/public`),\n\tfind: (id) => lilPost(\"/events/find\", { id: Number(id) }),\n\tall: () => lilGet(\"/events/all\"),\n\tcategory: (category) => lilGet(`/events/category/${category}`),\n\tcount: () => lilGet(\"/events/count\"),\n\tcreate: (body) => lilPut(\"/users/setMyPassword\", body),\n\tuploadImage: (formData) => {\n\t\t// must contain file and eventID as formData\n\t\tlilFetch({\n\t\t\tapi: \"/events/image\",\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData,\n\t\t\tjsonStringify: false,\n\t\t});\n\t},\n\tcurrentYear: (length, offset) => lilGet(`/events/page/${length}/${offset}`),\n\tsince: (epochtime) => lilGet(`/events/since/${epochtime}`),\n\tpublic: {\n\t\tall: () => lilFetch(\"/events/all/public\"),\n\t\tcurrentYear: (length, offset) =>\n\t\t\tlilGet(`/events/page/public/${length}/${offset}`),\n\t},\n\t// priorYear \"events-for-year-controller\" which isn't as useful\n};\n\nconst admin = {\n\troles: {\n\t\tadd: (id, role) =>\n\t\t\tlilPost(\"/events/addRoleToUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t\tdelete: (id, role) =>\n\t\t\tlilPost(\"/events/removeRoleFormUser\", {\n\t\t\t\tuserId: Number(id),\n\t\t\t\trole: role,\n\t\t\t}),\n\t},\n\tusers: {\n\t\tall: () => {},\n\t\tcreate: () => {},\n\t\tfindById: () => {},\n\t\tfindByEmail: () => {},\n\t\tsetPassword: () => {},\n\t},\n\tbookings: {\n\t\tadd: () => {},\n\t\tdelete: () => {},\n\t\tsetGm: () => {},\n\t},\n};\n\n/* ------------------------- Export basic functions ------------------------- */\nexport { fetcher, lilFetch, lilGet, lilPost, lilPut, lilDelete };\n\n/* -------------------------- Export user functions ------------------------- */\nexport {\n\tstatus,\n\tisAdmin,\n\tlogin,\n\tlogout,\n\tme,\n\tbookings,\n\tfavorites,\n\tpassword,\n\tevents,\n\tadmin,\n};\n"],
  "mappings": "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",
  "names": ["password"]
}
