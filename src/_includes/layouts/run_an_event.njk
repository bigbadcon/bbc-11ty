{% extends 'layouts/base.njk' %}

{% block header %}
    {% include 'components/header.njk' %}
{% endblock %}

{% block content %}
    <main id="content">
        <div class="mx-auto rounded-md shadow-md max-w-content p-base px-lg bg-card">
            <h1 class="font-serif text-4xl font-bold leading-none md:text-5xl text-header mb-base">{{title}}</h1>
            <div class="prose max-w-content2">{{ content | safe }}</div>
            <section class="my-base">
                {# START Submit Form: only show if logged in #}
                <div x-cloak x-show="!isAuth" class="prose">
                    <p>You must be <button @click.stop="modal = 'login'" class="font-bold underline text-highlight">logged in</button> to submit a game</p>
                </div>

                <div x-cloak x-show="isAuth && user" x-data="runAnEventData">
                    <div x-show="!eventSubmitted" id="submit-your-event">
                        <header class="prose">
                            <h2>Submit Your Event</h2>
                            <p>
                                <span class="font-bold text-highlight">*</span>
                                <em>required field</em>
                            </p>
                        </header>
                        <form id="form" action="post" class="mt-base" id="form-run-an-event" @submit.prevent="submitEvent">
                            {# TODO: add honeypot #}
                            <input type="hidden" x-model="eventInfo.userDisplayName" x-init="eventInfo.userDisplayName = user && user.displayName; $watch('user', value => eventInfo.userDisplayName = value && value.displayName)">
                            {# Personal Info #}
                            <fieldset>
                                <legend>Personal Info</legend>
                                <div class="required">
                                    <label for="publicName">Public Badge Name</label>
                                    <p class="text-xs mb-sm text-body">We encourage attendees to list their first and last names. However, if for privacy reasons you would like to use another name, enter it here.</p>
                                    <input id="publicName" name="publicName" type="text" value=""
                                    x-init="eventInfo.publicName = user && user.displayName; $watch('user', value => eventInfo.publicName = value && value.displayName)"
                                    x-model="eventInfo.publicName" @blur="validate"/>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Community Standards Agreement</legend>
                                <div class="prose mb-sm">
                                    <p>Go Play NW is committed to cultivating a culture of respect, support, and kindness at both our in-person and online events. We ask that all of our attendees agree to abide by our Community Standards, please take a moment to read them before answering yes below.</p>
                                    <p>
                                        <a href="/code-of-conduct" class="icon-scroll">Code of Conduct</a>
                                    </p>
                                </div>
                                <div class="required">
                                    <input type="checkbox" id="agree-to-community-standards" name="agree-to-community-standards" value="Yes" x-model="eventInfo.communityStandards" required>
                                    <label for="agree-to-community-standards" class="text-body-highlight"3324>
                                        Yes &mdash; I, <span x-text="user && user.displayName" class="font-bold"></span>, agree to the Go Play NW Code of Conduct
                                    </label>
                                </div>
                            </fieldset>

                            {# END Personal Info #}
                            {# Event Info - Personal Info must be complete before showing #}
                            <fieldset class="transition-opacity" :class="(isPersonalInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Event Info</legend>
                                <div class="required">
                                    <label for="eventName">Event Name</label>
                                    <input id="eventName" name="eventName" type="text" value="" x-model="eventInfo.eventName" @blur="validate" class="w-full max-w-md"/>
                                </div>
                                <div class="required">
                                    <label for="format">Format</label>
                                    <select id="format" name="format" x-model="eventInfo.format" @blur="validate">
                                        <option :disabled="eventInfo.format !== ''" selected value="">-- Choose One --</option>
                                        <template x-for="type in format">
                                            <option :value="type.name" x-text="type.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div x-show="isGame" class="required">
                                    <label for="system">System</label>
                                    <input id="system" name="system" type="text" value="" x-model="eventInfo.system" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="eventDescription">Description</label>
                                    <textarea cols="30" id="eventDescription" name="eventDescription" rows="3" x-model="eventInfo.eventDescription" @blur="validate"></textarea>
                                </div>
                                <div>
                                    <label for="eventImage">Event Image</label>
                                    <p class="text-sm my-sm">Images are cropped automatically at 16/9 ratio and centered. Images should be mininum 760x428 px and maximum 1,520x856 px (or there abouts) and formatted with jpg or webp (png or gif accepted but generally the former compress better).</p>
                                    <input type="file" name="eventImage" id="eventImage" accept="image/*" class="mr-base" @change="showPreview">
                                    <img id="image-preview" class="hidden object-cover object-center rounded-md my-sm" x-ref="preview" style="aspect-ratio: 16/9"/>
                                </div>
                                <div>
                                    <label for="otherInfo">Other info we should know (this will not go in the program)</label>
                                    <textarea cols="30" id="otherInfo" name="otherInfo" rows="3" x-model="eventInfo.otherInfo"></textarea>
                                </div>
                                {# <div>
                                    <label for="imageUpload">Image Upload (NOT CURRENTLY WORKING)</label>
                                    <input id="imageUpload" name="imageUpload" type="text" value="" x-model="eventInfo.imageUpload"/>
                                </div> #}
                            </fieldset>
                            {# END Event Info #}
                            {# Player/Attendee Info - all above must be completed #}
                            <fieldset class="transition-opacity" :class="(isEventInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Player/Attendee Info</legend>
                                {# Only required for games #}
                                <div class="required">
                                    <label for="minPlayers">Minimum players/attendees</label>
                                    <input id="minPlayers" name="minPlayers" type="text" value="" x-model="eventInfo.minPlayers" @blur="validate"/>
                                </div>
                                {# Only required for games #}
                                <div class="required">
                                    <label for="maxPlayers" >Maximum players/attendees</label>
                                    <input id="maxPlayers" name="maxPlayers" type="text" value="" x-model="eventInfo.maxPlayers" @blur="validate"/>
                                </div>
                                <div x-show="isRPGorLARP" class="required">
                                    <label for="characters">Characters</label>
                                    <select id="characters" name="characters" x-model="eventInfo.characters" @blur="validate">
                                        <option :disabled="eventInfo.characters !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>Provided</option>
                                        <option>Created at the table</option>
                                        <option>Other/Does not apply</option>
                                    </select>
                                </div>
                            </fieldset>
                            {# END Player Attendee Info #}
                            {# Scheduling Info - player age must be completed #}
                            <fieldset class="transition-opacity" :class="(isPlayerInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Scheduling Info</legend>
                                <div class="required">
                                    <label for="eventLength">Event Length</label>
                                    <select id="eventLength" name="eventLength" x-model="eventInfo.eventLength" @blur="validate">
                                        <option :disabled="eventInfo.eventLength !== '0'" selected value="0">
                                            -- Choose One --
                                        </option>
                                        <option value="1">1 hour</option>
                                        <option value="2">2 hours</option>
                                        <option value="4">4 hours</option>
                                    </select>
                                </div>
                                <div x-show="eventInfo.eventLength">
                                    <label for="schedulePrefBlock">Scheduled Slot</label>
                                    <div id="schedulePrefBlock" class="flex items-center">
                                        <select id="schedulePrefSel" name="schedulePrefSel" x-model="eventInfo.schedulePref" @blur="validate">
                                            <option :disabled="eventInfo.format !== ''" selected value="">-- Choose One --</option>
                                            <template x-for="(time, i) in scheduleTimes['-1']">
                                                <option :value="time" x-text="time"></option>
                                            </template>
                                        </select>
                                    </div>

                                </div>
                            </fieldset>
                            {# END Scheduling Info #}
                            {# Content Advisory & Safety Tools - show only if scheduling is completed #}
                            <fieldset class="transition-opacity" :class="(isSchedulingInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Content Warnings &amp; Safety Tools</legend>
                                {# Break out to Maturity level and other stuff #}
                                {# No Content Advisory vs Adult themes. Then add new list which is meta #}
                                <div class="required">
                                    <div>
                                        <label for="triggerWarnings">Content Warnings</label>
                                        <input id="triggerWarnings" name="triggerWarnings" type="text" value="" x-model="eventInfo.triggerWarnings" class="w-full max-w-md"/>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Safety Tools</label>
                                    <div class="checkbox-grid">
                                        <template x-for="(type, i) in safetyTools">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'safetyTools' + i" :id="'safetyTools' + i" :value="type" @change="setCheckboxArray($el,'safetyTools')">
                                                <label :for="'safetyTools' + i" x-text="type"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Accessibility Options</label>
                                    <div class="checkbox-grid">
                                        <template x-for="(type, i) in accessibilityOptions">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'accessibilityOptions' + i" :id="'accessibilityOptions' + i" :value="type" @change="setCheckboxArray($el,'accessibilityOptions')">
                                                <label :for="'accessibilityOptions' + i" x-text="type"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Game Tags</label>
                                    <div class="checkbox-grid">
                                        <template x-for="(type, i) in eventTags">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'eventTags' + i" :id="'eventTags' + i" :value="type" @change="setCheckboxArray($el,'eventTags')">
                                                <label :for="'eventTags' + i" x-text="type"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div>
                                    <label for="additionalRequirements">Additional Information</label>
                                    <textarea cols="30" id="additionalRequirements" name="additionalRequirements" rows="3" x-model="eventInfo.additionalRequirements"></textarea>
                                </div>
                            </fieldset>
                            <button type="submit" :disabled="!isSchedulingInfoComplete">Submit</button>
                        </form>
                    </div>
                    {# END event submission div #}
                    {# event submitted #}
                    <div class="prose" x-show="eventSubmitted" id="event-submitted">
                        <h2>Thanks for submitting your event!</h2>
                        <p>Our staff will review your <span x-text="eventInfo.format"></span> event, <span x-text="eventInfo.eventName" class="italic font-bold"></span>, and let you know about scheduling it!</p>
                        <p>You can <a href="/run-an-event">submit another event</a> now if you'd like.</p>
                    </div>
                </div>
                {# END runAnEventData component #}
            </section>
        </div>
    </main>
{% endblock %}

{#
    PUT /events/create API
    {
        "accessabilityOptions": "string", //  not used
        "additionalGms": "string", // used
        "additionalRequirements": "string", //used
        "characters": "string", //used
        "contentAdvisory": true, // used but using a checkbox
        "eventCategoryId": 0, // this is format
        "eventDescription": "string", // used
        "eventFacilitators": "string", // not used
        "eventMetadataIds": [
        0
        ], // need to combine multiple
        "eventName": "string", // used
        "gm": "string", // need to convert from publicName?
//        "gmAge": "string", //need to convert from yourAge
        "length": "string", // used but named eventLength
        "minPlayers": "string", //used
        "otherInfo": "string", //used
//        "playerAge": "string", //used
        "players": "string", // this is maxPlayers
//        "playtest": "string", //used
        "requestMediaEquipment": "string", // used
        "requestMediaRoom": true,   // used
        "requestPrivateRoom": true, // use locationPref for boolean and add rest to additionalRequirements 
//        "runNumberOfTimes": 0, // used
        "safetyTools": "string", // used convert to string
        "schedulingPref": "string", // convert to string
        "system": "string", //  used
//        "tableType": "string",  // used
        "triggerWarnings": "string",    // used
        "userDisplayName": "string" , // matches user.displayName
    }
 #}

{% block pagebottom %}

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            // Check if variable is a string with stuff in it
            function isFull(str) {
                return (!!str && typeof str === 'string' && str.trim().length !== 0);
            }

            function convertToCreateEventAPI(eventInfo) {
                // const eventMetadataIds = [
                //...eventInfo.playerContributions,
                // ...eventInfo.gameTags,
                // ...eventInfo.gameFocus,
                // ...eventInfo.gameMood,
                // ...eventInfo.gameGenre,
                // ...eventInfo.contentAdvisoryOptions,
                // ...eventInfo.panelTopic
                // ].map(id => parseInt(id));

                const scheduleTimeDetails = {
                    "Saturday Morning": {
                        "date": "2022-10-01",
                        "time": "09:30:00"
                    },
                    "Saturday Afternoon": {
                        "date": "2022-10-01",
                        "time": "14:00:00"
                    },
                    "Saturday Evening": {
                        "date": "2022-10-01",
                        "time": "19:00:00"
                    },
                    "Sunday Morning": {
                        "date": "2022-10-02",
                        "time": "11:00:00"
                    },
                    "Sunday Afternoon": {
                        "date": "2022-10-02",
                        "time": "16:00:00"
                    }
                };

                eventInfo = {
                    accessabilityOptions: eventInfo
                        .accessibilityOptions
                        .toString(),
                    additionalGms: null, //eventInfo.additionalGMs,
                    additionalRequirements: eventInfo.additionalRequirements, // + " Room Request: " + eventInfo.locationPref,
                    characters: eventInfo.characters,
                    contentAdvisory: 0, //eventInfo.contentAdvisory !== "Yes",  this is a boolean in the API so we are using 1000000 is no-content-advisory; selection info goes into the eventMetadataIds
                    eventCategoryId: parseInt(eventInfo.format),
                    eventDescription: eventInfo.eventDescription,
                    //eventFacilitators: eventInfo.facilitators,
                    eventMetadataIds: [], //eventMetadataIds,
                    eventName: eventInfo.eventName,
                    format: eventInfo.format,
                    gm: eventInfo.publicName,
                    gmAge: '18+', //dummy value
                    length: eventInfo.eventLength,
                    minPlayers: eventInfo.minPlayers,
                    otherInfo: eventInfo.otherInfo,
                    playerAge: '18+', //dummy value
                    players: eventInfo.maxPlayers,
                    playtest: 0,
                    // playtest: (eventInfo.playtest === 'Yes')
                    //     ? 1
                    //     : 0,
                    requestMediaEquipment: eventInfo.requestMediaEquipment === "Yes",
                    requestMediaRoom: eventInfo.requestMediaRoom === "Yes",
                    //                    requestPrivateRoom: eventInfo.locationPref !== "No Preference",  add extra to additionalRequirements for now
                    runNumberOfTimes: 1, //dummy value
                    safetyTools: eventInfo
                        .safetyTools
                        .toString(),
                    schedulingPref: eventInfo
                        .schedulePref
                        .toString(),
                    eventStartDate: scheduleTimeDetails[eventInfo.schedulePref].date,
                    eventStartTime: scheduleTimeDetails[eventInfo.schedulePref].time,
                    eventTags: eventInfo
                        .eventTags
                        .toString(),
                    system: eventInfo.system,
                    //                    tableType: eventInfo.tableType,
                    triggerWarnings: eventInfo.triggerWarnings,
                    userDisplayName: eventInfo.userDisplayName,
                    eventImage: eventInfo.eventImage
                }
                return eventInfo;
            }

            Alpine.data('runAnEventData', function () {
                return {
                    eventSubmitted: false,
                    eventInfo: {
                        // -- Personal Info
                        publicName: '', //required
                        //yourAge: '', required
                        communityStandards: false,
                        // -- Event Info
                        eventName: '', //required
                        format: '', //required
                        system: '', //required only isGame
                        //                        playtest: '', required only isGame
                        eventDescription: '', //required
                        otherInfo: '',
                        // imageUpload not working yet
                        // -- Player Info
                        //playerAge: '', required if yourAge = "18+"
                        minPlayers: '', //required if isGame
                        maxPlayers: '', //required if isGame
                        characters: '', //not required
                        // -- Scheduling Info
                        //                        runNumberOfTimes: '', required
                        //                        locationPref: '', required if isTabletop
                        //                        tableType: '', required if Board/Card game
                        //                        mediaEquipment: '', required if not isGame
                        //                        mediaEquipmentRequested: '', required if mediaEquipment = "Equipment Requested"
                        eventLength: null, //required
                        schedulePref: '', // not required
                        // -- Content Advisory
                        contentAdvisory: '', //required
                        contentAdvisoryOptions: '', //not required
                        triggerWarnings: '', //not required
                        safetyTools: '', //not required
                        // -- Additional Info
                        panelTopic: '', //not required
                        gameTags: '', //not required
                        // gameFocus: '', not required
                        // playerContributions: '', not required
                        // gameGenre: '', not required
                        // gameMood: '', not required
                        // additionalGMs: '', not required
                        additionalRequirements: '', //not required
                        eventTags: '', //not required
                        eventImage: '', //not required
                    },
                    get isPersonalInfoComplete() {
                        const x = this.eventInfo;
                        //return [x.publicName, x.yourAge].every(isFull) && x.communityStandards;
                        return [x.publicName].every(isFull) && x.communityStandards;
                    },
                    get isEventInfoComplete() {
                        const x = this.eventInfo;
                        let fields = [x.eventName, x.format, x.eventDescription]
                        if (this.isGame) 
                            fields = [
                                ...fields,
                                x.system //,
                                //                                x.playtest
                            ]
                            // otherInfo and image upload not required
                        return (this.isPersonalInfoComplete && fields.every(isFull));
                    },
                    get isPlayerInfoComplete() {
                        const x = this.eventInfo;
                        //let fields = [x.playerAge, x.minPlayers, x.maxPlayers]
                        let fields = [x.minPlayers, x.maxPlayers]
                        if (this.isRPGorLARP) 
                            fields = [
                                ...fields,
                                x.characters
                            ]
                        return (this.isEventInfoComplete && fields.every(isFull));
                    },
                    get isSchedulingInfoComplete() {
                        const x = this.eventInfo
                        //let fields = [x.runNumberOfTimes, x.eventLength]
                        let fields = [x.eventLength]
                        // if (this.isTableTop)
                        //     fields = [
                        //         ...fields,
                        //         x.locationPref
                        //     ]
                        // if (this.isBoardgame)
                        //     fields = [
                        //         ...fields,
                        //         x.tableType
                        //     ]
                        // if (!this.isGame)
                        //     fields = [
                        //         ...fields,
                        //         x.mediaRoom
                        //     ]
                        return (this.isPlayerInfoComplete && fields.every(isFull));
                    },
                    validate(event) {
                        const target = event.target;
                        const parent = target.parentNode;
                        // console.log("validate", event);
                        if (target.value === '') {
                            parent
                                .classList
                                .add('error-required');
                        } else {
                            parent
                                .classList
                                .remove('error-required');
                        } //TODO: add test to see if isNumber
                    },
                    submitEvent() {
                        console.log("submit", convertToCreateEventAPI(this.eventInfo))
                        const y = 0

                        const submitNow = () => {
                            this.createEvent()
                            this.eventSubmitted = true
                        }

                        const scrollEventListener = () => {
                            if (window.pageYOffset === 0) {
                                submitNow();
                                window.removeEventListener('scroll', scrollEventListener)
                            }
                        }
                        function checkScrollEnd() {
                            window.addEventListener('scroll', scrollEventListener);
                        }
                        checkScrollEnd()
                        window.scroll({top: y, behavior: 'smooth'});
                    },
                    async createEvent() {
                        const eventInfo = convertToCreateEventAPI(this.eventInfo)
                        console.log(eventInfo);
                        const data = await fetchData('/events/create', {
                            method: 'PUT',
                            body: convertToCreateEventAPI(this.eventInfo)
                        });
                        const id = await data
                        alert(id)
                        await this.uploadEventImage(id)
                        return id;
                    },
                    async uploadEventImage(eventId) {
                        const form = getElementById('form')
                        const formData = new FormData(form)
                        formData.append('eventId', eventId.toString());

                        async function customFetch(url, options) {
                            try {
                                let response = await fetch(url, options)
                                console.log(`RESPONSE:fetch for ${url}`, response)
                                if (response.status !== 200) 
                                    throw `fetch fail status: ${response.status}`
                                let result = await response.json()
                                console.log(`RESULT:fetch for ${url}`, result)
                                return result
                            } catch (err) {
                                console.error(`ERROR:fetch for ${url}`, err)
                                return false
                            }
                        }

                        let data = await customFetch('/.netlify/functions/submit-event-image', {
                            method: 'POST',
                            body: formData
                        })
                        return data
                    },
                    setCheckboxArray(el, arrayName) {
                        this.eventInfo[arrayName] = this.eventInfo[arrayName] || [];
                        // if checked then add value to array; otherwise remove
                        if (el.checked) {
                            this.eventInfo[arrayName] = [
                                ...this.eventInfo[arrayName],
                                el.value
                            ]
                        } else {
                            this.eventInfo[arrayName] = this
                                .eventInfo[arrayName]
                                .filter(item => item !== el.value)
                        }
                        //console.log(this.eventInfo[arrayName])
                    },
                    // times1hr: [
                    //     "Friday afternoon (between 2PM-6PM)",
                    //     "Friday night (between 8PM-Midnight)",
                    //     "Saturday morning (between 9AM-1PM)",
                    //     "Saturday afternoon (between 2PM-6PM)",
                    //     "Saturday night (between 8PM-Midnight)",
                    //     "Sunday morning (between 9AM-1PM)",
                    //     "Sunday afternoon (between 2PM-6PM)"
                    // ],
                    scheduleTimes: {
                        // "0": [],
                        // "1": [
                        //     "Friday morning (between 9AM-1PM)",
                        //     "Friday afternoon (between 2PM-6PM)",
                        //     "Friday night (between 8PM-Midnight)",
                        //     "Saturday morning (between 9AM-1PM)",
                        //     "Saturday afternoon (between 2PM-6PM)",
                        //     "Saturday night (between 8PM-Midnight)",
                        //     "Sunday morning (between 9AM-1PM)",
                        //     "Sunday afternoon (between 2PM-6PM)"
                        // ],
                        // "2": [
                        //     "Friday 9AM-11AM",
                        //     "Friday 11AM-1PM",
                        //     "Friday 2PM-4PM",
                        //     "Friday 4PM-6PM",
                        //     "Friday 8PM-10PM",
                        //     "Friday 10PM-Midnight",
                        //     "Saturday 9AM-11AM",
                        //     "Saturday 11AM-1PM",
                        //     "Saturday 2PM-4PM",
                        //     "Saturday 4PM-6PM",
                        //     "Saturday 8PM-10PM",
                        //     "Saturday 8PM-Midnight",
                        //     "Sunday 9AM-11AM",
                        //     "Sunday 11AM-1PM",
                        //     "Sunday 2PM-4PM",
                        //     "Sunday 4PM-6PM"
                        // ],
                        // "4": [
                        //     "Friday 9AM-1PM",
                        //     "Friday 2PM-6PM",
                        //     "Friday 8PM-Midnight",
                        //     "Saturday 9AM-1PM",
                        //     "Saturday 2PM-6PM",
                        //     "Saturday 8PM-Midnight",
                        //     "Sunday 9AM-1PM",
                        //     "Sunday 2PM-6PM"
                        // ],
                        // "6": [
                        //     "Friday 10AM-4PM",
                        //     "Friday 6PM-Midnight",
                        //     "Saturday 10AM-4PM",
                        //     "Saturday 6PM-Midnight",
                        //     "Sunday 9AM-3PM",
                        //     "Sunday 2PM-8PM"
                        // ],
                        // "8": [
                        //     "Friday 10AM-6PM",
                        //     "Friday 2PM-10PM",
                        //     "Saturday 10AM-6PM",
                        //     "Saturday 2PM-10PM",
                        //     "Sunday 10AM-6PM"],
                        "-1": ["Saturday Morning", "Saturday Afternoon", "Saturday Evening", "Sunday Morning", "Sunday Afternoon"]
                    },
                    findName(array, name) {
                        return array.find(e => e.name === name)
                    },
                    formatId(name) {
                        return this
                            .format
                            .find(e => e.name === name)
                            .id
                            .toString()
                    },
                    get isGame() {
                        return ["RPG", "LARP", "Board/Card Game"].includes(this.eventInfo.format)
                    },
                    get isRPGorLARP() {
                        return ["RPG", "LARP"].includes(this.eventInfo.format)
                    },
                    get isTableTop() {
                        return ["RPG", "Board/Card Game"].includes(this.eventInfo.format)
                    },
                    get isBoardgame() {
                        return this.eventInfo.format === "Board/Card Game"
                    },
                    format: [
                        {
                            "id": 27,
                            "name": "Board/Card Game",
                            "slug": "board-card-game"
                        }, {
                            "id": 28,
                            "name": "LARP",
                            "slug": "larp"
                        },
                        // {
                        //     "id": 30,
                        //     "name": "Panel",
                        //     "slug": "panel"
                        // },
                        {
                            "id": 29,
                            "name": "RPG",
                            "slug": "rpg"
                        },
                        // {
                        //     "id": 31,
                        //     "name": "Workshops",
                        //     "slug": "workshops"
                        // }
                    ],
                    // panelTopic: [],
                    // gameTags: [
                    //     {
                    //         "id": 35,
                    //         "name": "Diceless",
                    //         "slug": "diceless"
                    //     }, {
                    //         "id": 34,
                    //         "name": "GMless",
                    //         "slug": "gmless"
                    //     }, {
                    //         "id": 36,
                    //         "name": "Map-Building",
                    //         "slug": "map-building"
                    //     }, {
                    //         "id": 37,
                    //         "name": "Non-Violent",
                    //         "slug": "non-violent"
                    //     }, {
                    //         "id": 39,
                    //         "name": "Other",
                    //         "slug": "other"
                    //     }, {
                    //         "id": 32,
                    //         "name": "Playtest",
                    //         "slug": "playtest"
                    //     }, {
                    //         "id": 33,
                    //         "name": "Run by Designer",
                    //         "slug": "run-by-designer"
                    //     }, {
                    //         "id": 38,
                    //         "name": "World Building",
                    //         "slug": "world-building"
                    //     }
                    // ],
                    // gameFocus: [],
                    // playerContributions: [],
                    // gameGenre: [],
                    // gameMood: [],
                    // contentAdvisoryOptions: [
                    //     {
                    //         "id": 91,
                    //         "name": "Gore",
                    //         "slug": "gore"
                    //     }, {
                    //         "id": 90,
                    //         "name": "Graphic Violence",
                    //         "slug": "graphic-violence"
                    //     }, {
                    //         "id": 88,
                    //         "name": "Provocative",
                    //         "slug": "provocative"
                    //     }, {
                    //         "id": 89,
                    //         "name": "Sex and Sexuality",
                    //         "slug": "sex-and-sexuality"
                    //     }
                    // ],
                    safetyTools: [
                        'X-card',
                        'Script Change',
                        'Stoplight',
                        'Support Flower',
                        'Lines and Veils',
                        'Palette',
                        'Pause/Retcon/Fade to Black',
                        'Other'
                    ],
                    accessibilityOptions: [
                        'Text Only', 'Outside Portal/Site', 'Video', 'Audio/Voice', 'Other'
                    ],
                    eventTags: [
                        'Diceless',
                        'GMless',
                        'Map-Building',
                        'Non-Violent',
                        'Other',
                        'Playtest',
                        'Run by Designer',
                        'World Building'
                    ]
                }
            })
        })
    </script>

{% endblock %}