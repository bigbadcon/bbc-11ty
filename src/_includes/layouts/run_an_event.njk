{% extends 'layouts/base.njk' %}

{% block header %}
    {% include 'components/header.njk' %}
{% endblock %}

{% block content %}
    <main id="content">
        <div class="mx-auto max-w-content p-base px-lg bg-card rounded-md shadow-md">
            <h1 class="font-serif text-4xl font-bold leading-none md:text-5xl text-header mb-base">{{title}}</h1>
            <div class="prose max-w-content2">{{ content | safe }}</div>
            <section class="my-base">
                {# start submit form: only show if logged in #}
                <div x-cloak x-show="!isauth" class="prose">
                    <p>you must be <button @click.stop="modal = 'login'" class="font-bold underline text-highlight">logged in</button> to submit a game</p>
                </div>

                <div x-cloak x-show="isauth && user" x-data="runaneventdata">
                    <div x-show="!eventsubmitted" id="submit-your-event">
                        <header class="prose">
                            <h2>submit your event</h2>
                            <p>
                                <span class="font-bold text-highlight">*</span>
                                <em>required field</em>
                            </p>
                        </header>
                        <form action="post" class="mt-base" id="form-run-an-event" @submit.prevent="submitevent">
                            {# todo: add honeypot #}
                            <input type="hidden" x-model="eventinfo.userdisplayname" x-init="eventinfo.userdisplayname = user && user.displayname; $watch('user', value => eventinfo.userdisplayname = value && value.displayname)">
                            {# personal info #}
                            <fieldset>
                                <legend>personal info</legend>
                                <div class="required">
                                    <label for="publicname">public badge name</label>
                                    <p class="text-xs mb-sm text-body">we encourage attendees to list their first and last names. however, if for privacy reasons you would like to use another name, enter it here.</p>
                                    <input id="publicname" name="publicname" type="text" value=""
                                    x-init="eventinfo.publicname = user && user.displayname; $watch('user', value => eventinfo.publicname = value && value.displayname)"
                                    x-model="eventinfo.publicname" @blur="validate"/>
                                </div>
<!--                                <div class="required">-->
<!--                                    <label for="yourage">-->
<!--                                        your age at start of con-->
<!--                                        <span>{{sitemeta.eventdate}}</span>-->
<!--                                    </label>-->
<!--                                    <select id="yourage" name="yourage" x-model="eventinfo.yourage" @change="if (eventinfo.yourage === '13+') eventinfo.playerage = '13+'" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.yourage !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option>13+</option>-->
<!--                                        <option>18+</option>-->
<!--                                    </select>-->
<!--                                </div>-->

                            </fieldset>
                            <fieldset>
                                <legend>community standards agreement</legend>
                                <div class="prose mb-sm">
                                    <p>go play nw is committed to cultivating a culture of respect, support, and kindness at both our in-person and online events. we ask that all of our attendees agree to abide by our community standards, please take a moment to read them before answering yes below.</p>
                                    <p>
                                        <a href="/code-of-conduct" class="icon-scroll">code of conduct</a>
                                    </p>
                                </div>
                                <div class="required">
                                    <input type="checkbox" id="agree-to-community-standards" name="agree-to-community-standards" value="yes" x-model="eventinfo.communitystandards" required>
                                    <label for="agree-to-community-standards" class="text-body-highlight"3324>
                                        yes &mdash; i, <span x-text="user && user.displayname" class="font-bold"></span>, agree to the go play nw code of conduct
                                    </label>
                                </div>
                            </fieldset>

                            {# end personal info #}
                            {# event info - personal info must be complete before showing #}
                            <fieldset class="transition-opacity" :class="(ispersonalinfocomplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>event info</legend>
                                <div class="required">
                                    <label for="eventname">event name</label>
                                    <input id="eventname" name="eventname" type="text" value="" x-model="eventinfo.eventname" @blur="validate" class="w-full max-w-md"/>
                                </div>
                                <div class="required">
                                    <label for="format">format</label>
                                    <select id="format" name="format" x-model="eventinfo.format" @blur="validate">
                                        <option :disabled="eventinfo.format !== ''" selected value="">-- choose one --</option>
                                        <template x-for="type in format">
                                            <option :value="type.name" x-text="type.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div x-show="isgame" class="required">
                                    <label for="system">system</label>
                                    <input id="system" name="system" type="text" value="" x-model="eventinfo.system" @blur="validate"/>
                                </div>
<!--                                <div x-show="isgame" class="required">-->
<!--                                    <label for="playtest">is this a playtest?</label>-->
<!--                                    <select id="playtest" name="playtest" x-model="eventinfo.playtest" @blur="validate" >-->
<!--                                        <option :disabled="eventinfo.playtest !== ''" selected value="">&#45;&#45; choose one &#45;&#45;</option>-->
<!--                                        <option>no</option>-->
<!--                                        <option>yes</option>-->
<!--                                    </select>-->
<!--                                </div>-->
                                <div class="required">
                                    <label for="eventdescription">description</label>
                                    <textarea cols="30" id="eventdescription" name="eventdescription" rows="3" x-model="eventinfo.eventdescription" @blur="validate"></textarea>
                                </div>
                                <div>
                                    <label for="otherinfo">other info we should know (this will not go in the program)</label>
                                    <textarea cols="30" id="otherinfo" name="otherinfo" rows="3" x-model="eventinfo.otherinfo"></textarea>
                                </div>
                                {# <div>
                                    <label for="imageupload">image upload (not currently working)</label>
                                    <input id="imageupload" name="imageupload" type="text" value="" x-model="eventinfo.imageupload"/>
                                </div> #}
                            </fieldset>
                            {# end event info #}
                            {# player/attendee info - all above must be completed #}
                            <fieldset class="transition-opacity" :class="(iseventinfocomplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>player/attendee info</legend>
<!--                                <div x-show="eventinfo.playerage === '13+'" class="prose mb-base">-->
<!--                                    <p class="italic">event designed for people aged 13+</p>-->
<!--                                </div>-->
<!--                                <div x-show="eventinfo.yourage === '18+'" class="required">-->
<!--                                    <label for="playerage">-->
<!--                                        player/attendee age-->
<!--                                    </label>-->
<!--                                    <select id="playerage" name="playerage" x-model="eventinfo.playerage" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.playerage !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option>13+</option>-->
<!--                                        <option>18+</option>-->
<!--                                    </select>-->
<!--                                </div>-->
                                {# only required for games #}
                                <div class="required">
                                    <label for="minplayers">minimum players/attendees</label>
                                    <input id="minplayers" name="minplayers" type="text" value="" x-model="eventinfo.minplayers" @blur="validate"/>
                                </div>
                                {# only required for games #}
                                <div class="required">
                                    <label for="maxplayers" >maximum players/attendees</label>
                                    <input id="maxplayers" name="maxplayers" type="text" value="" x-model="eventinfo.maxplayers" @blur="validate"/>
                                </div>
                                <div x-show="isrpgorlarp" class="required">
                                    <label for="characters">characters</label>
                                    <select id="characters" name="characters" x-model="eventinfo.characters" @blur="validate">
                                        <option :disabled="eventinfo.characters !== ''" selected value="">
                                            -- choose one --
                                        </option>
                                        <option>provided</option>
                                        <option>created at the table</option>
                                        <option>other/does not apply</option>
                                    </select>
                                </div>
                            </fieldset>
                            {# end player attendee info #}
                            {# scheduling info - player age must be completed #}
                            <fieldset class="transition-opacity" :class="(isplayerinfocomplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>scheduling info</legend>
<!--                                <div class="required">-->
<!--                                    <label for="runnumberoftimes">run this event</label>-->
<!--                                    <select id="runnumberoftimes" name="runnumberoftimes" x-model="eventinfo.runnumberoftimes" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.runnumberoftimes !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option value="1">once</option>-->
<!--                                        <option value="2">twice</option>-->
<!--                                        <option value="3">i want to run this 3 times! whoa!</option>-->
<!--                                        <option value="4">i want to run this 4 times! yow!!!</option>-->
<!--                                    </select>-->
<!--                                </div>-->
<!--                                <div x-show="istabletop" class="required">-->
<!--                                    <label for="locationpref">location preference</label>-->
<!--                                    <select id="locationpref" name="locationpref" x-model="eventinfo.locationpref" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.locationpref !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option>no preference</option>-->
<!--                                        <option>private room</option>-->
<!--                                        <option>outdoor pavilion</option>-->
<!--                                        <option>atrium</option>-->
<!--                                    </select>-->
<!--                                </div>-->
<!--                                <div x-show="isboardgame" class="required">-->
<!--                                    <label for="tabletype">board game table type requested</label>-->
<!--                                    <select id="tabletype" name="tabletype" x-model="eventinfo.tabletype" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.tabletype !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option>long</option>-->
<!--                                        <option>round</option>-->
<!--                                        <option>either</option>-->
<!--                                    </select>-->
<!--                                </div>-->
<!--                                <div x-show="!isgame" class="required">-->
<!--                                    <label for="mediaroom">request media room</label>-->
<!--                                    <select id="mediaroom" name="mediaroom" x-model="eventinfo.mediaroom" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.mediaroom !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option>no</option>-->
<!--                                        <option>yes</option>-->
<!--                                    </select>-->
<!--                                </div>-->
<!--                                <div x-show="eventinfo.mediaroom === 'yes'" class="required">-->
<!--                                    <label for="mediaequipment">media equipment</label>-->
<!--                                    <select id="mediaequipment" name="mediaequipment" x-model="eventinfo.mediaequipment" @blur="validate">-->
<!--                                        <option :disabled="eventinfo.mediaequipment !== ''" selected value="">-->
<!--                                            &#45;&#45; choose one &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option>i have my own</option>-->
<!--                                        <option>equipment requested</option>-->
<!--                                    </select>-->
<!--                                </div>-->
<!--                                <div x-show="eventinfo.mediaequipment === 'equipment requested'" class="required">-->
<!--                                    <label for="mediaequipmentrequested">media equipment requested</label>-->
<!--                                    <input id="mediaequipmentrequested" name="mediaequipmentrequested" type="text" value="" x-model="eventinfo.mediaequipmentrequested" @blur="validate"/>-->
<!--                                </div>-->
                                <div class="required">
                                    <label for="eventlength">event length</label>
                                    <select id="eventlength" name="eventlength" x-model="eventinfo.eventlength" @blur="validate">
                                        <option :disabled="eventinfo.eventlength !== '0'" selected value="0">
                                            -- choose one --
                                        </option>
                                        <option value="1">1 hour</option>
                                        <option value="2">2 hours</option>
                                        <option value="4">4 hours</option>
<!--                                        <option value="6">6 hours</option>-->
<!--                                        <option value="8">8 hours</option>-->
                                    </select>
                                </div>
                                <div x-show="eventinfo.eventlength">
                                    <label for="scheduleprefblock">scheduled slot</label>
<!--                                    <template x-for="(time, i) in scheduleTimes[eventInfo.eventLength]">-->
<!--                                        <div id="schedulePrefBlock" class="flex items-center">-->
<!--                                            <input type="checkbox" :name="'time' + i" :id="'time' + i" :value="time" @change="setCheckboxArray($el,'schedulePref')">-->
<!--                                            <label :for="'time' + i" x-text="time"></label>-->
<!--                                        </div>-->
<!--                                    </template>-->
                                    <div id="schedulePrefBlock" class="flex items-center">
                                        <select id="schedulePrefSel" name="schedulePrefSel" x-model="eventInfo.schedulePref" @blur="validate">
                                            <option :disabled="eventInfo.format !== ''" selected value="">-- Choose One --</option>
                                            <template x-for="(time, i) in scheduleTimes['-1']">
                                                <option :value="time" x-text="time"></option>
                                            </template>
                                        </select>
                                    </div>

                                </div>
                            </fieldset>
                            {# END Scheduling Info #}
                            {# Content Advisory & Safety Tools - show only if scheduling is completed #}
                            <fieldset class="transition-opacity" :class="(isSchedulingInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Content Warnings &amp; Safety Tools</legend>
<!--                                <div x-show="eventInfo.playerAge === '13+'" class="prose mb-base">-->
<!--                                    <p class="italic">Event designed for people aged 13+</p>-->
<!--                                </div>-->
<!--                                <div x-show="eventInfo.playerAge === '18+'" class="prose mb-base">-->
<!--                                    <p class="italic">Event designed for people aged 18+</p>-->
<!--                                </div>-->
                                {# Break out to Maturity level and other stuff #}
                                {# No Content Advisory vs Adult themes. Then add new list which is meta #}
<!--                                <div x-show="eventInfo.playerAge === '18+'" class="required">-->
<!--                                <div class="required">-->
<!--                                    <label>Content Warnings</label>-->
<!--                                    <select id="contentAdvisory" name="contentAdvisory" x-model="eventInfo.contentAdvisory" @blur="validate">-->
<!--                                        <option :disabled="eventInfo.contentAdvisory !== ''" selected value="">-->
<!--                                            &#45;&#45; Choose One &#45;&#45;-->
<!--                                        </option>-->
<!--                                        <option value="No">No content advisory needed</option>-->
<!--                                        <option value="Yes">Yes, contains strong content</option>-->
<!--                                    </select>-->

<!--                                </div>-->
<!--                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory === 'Yes'">-->
<!--                                    <div x-show="eventInfo.contentAdvisory === 'Yes'">-->
<!--                                    <label>Types of Content Advisory</label>-->
<!--                                    <template x-for="(type, i) in contentAdvisoryOptions">-->
<!--                                        <div class="flex items-center">-->
<!--                                            <input type="checkbox" :name="'contentAdvisoryOptions' + i" :id="'contentAdvisoryOptions' + i" :value="type.id" @change="setCheckboxArray($el,'contentAdvisoryOptions')">-->
<!--                                            <label :for="'contentAdvisoryOptions' + i" x-text="type.name"></label>-->
<!--                                        </div>-->
<!--                                    </template>-->
<!--                                </div>-->
                                <div class="required">
<!--                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory === 'Yes'">-->
<!--                                    <div x-show="eventInfo.contentAdvisory === 'Yes'">-->
<!--                                    <label for="triggerWarnings">Potential trigger warnings</label>-->
                                    <div>
                                    <label for="triggerWarnings">Content Warnings</label>
                                    <input id="triggerWarnings" name="triggerWarnings" type="text" value="" x-model="eventInfo.triggerWarnings" class="w-full max-w-md"/>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Safety Tools</label>
                                    <div class="checkbox-grid">
                                        <template x-for="(type, i) in safetyTools">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'safetyTools' + i" :id="'safetyTools' + i" :value="type" @change="setCheckboxArray($el,'safetyTools')">
                                                <label :for="'safetyTools' + i" x-text="type"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Accessibility Options</label>
                                        <div class="checkbox-grid">
                                            <template x-for="(type, i) in accessibilityOptions">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'accessibilityOptions' + i" :id="'accessibilityOptions' + i" :value="type" @change="setCheckboxArray($el,'accessibilityOptions')">
                                                <label :for="'accessibilityOptions' + i" x-text="type"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
<!--                            </fieldset>-->
<!--                            {# END Content Advisory & Safety Tools #}-->
<!--                            {# Additional Info - not required #}-->
<!--                            <fieldset class="transition-opacity" :class="(isSchedulingInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">-->
<!--                                <legend>Additional Info</legend>-->
<!--                                <div x-show="eventInfo.format === formatId('Panel')" class="checkbox-grid">-->
<!--                                    <label>Panel Topic</label>-->
<!--                                    <template x-for="(type, i) in panelTopic">-->
<!--                                        <div class="flex items-center">-->
<!--                                            <input type="checkbox" :name="'panelTopic' + i" :id="'panelTopic' + i" :value="type.id" @change="setCheckboxArray($el,'panelTopic')">-->
<!--                                            <label :for="'panelTopic' + i" x-text="type.name"></label>-->
<!--                                        </div>-->
<!--                                    </template>-->
<!--                                </div>-->
<!--                                <div x-show="isGame">-->
<!--                                    <label>Game Tags</label>-->
<!--                                    <div class="checkbox-grid">-->
<!--                                        <template x-for="(type, i) in gameTags">-->
<!--                                            <div class="flex items-center">-->
<!--                                                <input type="checkbox" :name="'gameTags' + i" :id="'gameTags' + i" :value="type.id"  @change="setCheckboxArray($el,'gameTags')">-->
<!--                                                <label :for="'gameTags' + i" x-text="type.name"></label>-->
<!--                                            </div>-->
<!--                                        </template>-->
<!--                                    </div>-->
<!--                                </div>-->
                                <div x-show="isGame">
                                    <label>Game Tags</label>
                                    <div class="checkbox-grid">
                                        <template x-for="(type, i) in eventTags">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'eventTags' + i" :id="'eventTags' + i" :value="type" @change="setCheckboxArray($el,'eventTags')">
                                                <label :for="'eventTags' + i" x-text="type"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
<!--                                <div x-show="isGame">-->
<!--                                    <label>Game Focus</label>-->
<!--                                    <div class="checkbox-grid">-->
<!--                                        <template x-for="(type, i) in gameFocus">-->
<!--                                            <div class="flex items-center">-->
<!--                                                <input type="checkbox" :name="'gameFocus' + i" :id="'gameFocus' + i" :value="type.id"  @change="setCheckboxArray($el,'gameFocus')">-->
<!--                                                <label :for="'gameFocus' + i" x-text="type.name"></label>-->
<!--                                            </div>-->
<!--                                        </template>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                                <div x-show="isGame">-->
<!--                                    <label>Player Contributions</label>-->
<!--                                    <div class="checkbox-grid">-->
<!--                                        <template x-for="(type, i) in playerContributions">-->
<!--                                            <div class="flex items-center">-->
<!--                                                <input type="checkbox" :name="'playerContributions' + i" :id="'playerContributions' + i" :value="type.id" @change="setCheckboxArray($el,'playerContributions')">-->
<!--                                                <label :for="'playerContributions' + i" x-text="type.name"></label>-->
<!--                                            </div>-->
<!--                                        </template>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                                <div x-show="isGame">-->
<!--                                    <label>Game Genre</label>-->
<!--                                    <div class="checkbox-grid">-->
<!--                                        <template x-for="(type, i) in gameGenre">-->
<!--                                            <div class="flex items-center">-->
<!--                                                <input type="checkbox" :name="'gameGenre' + i" :id="'gameGenre' + i" :value="type.id" @change="setCheckboxArray($el,'gameGenre')">-->
<!--                                                <label :for="'gameGenre' + i" x-text="type.name"></label>-->
<!--                                            </div>-->
<!--                                        </template>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                                <div x-show="isGame">-->
<!--                                    <label>Game Mood</label>-->
<!--                                    <div class="checkbox-grid">-->
<!--                                        <template x-for="(type, i) in gameMood">-->
<!--                                            <div class="flex items-center">-->
<!--                                                <input type="checkbox" :name="'gameMood' + i" :id="'gameMood' + i" :value="type.id" @change="setCheckboxArray($el,'gameMood')">-->
<!--                                                <label :for="'gameMood' + i" x-text="type.name"></label>-->
<!--                                            </div>-->
<!--                                        </template>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                                <div>-->
<!--                                    <label for="additionalGMs">List any additional GMs/facilitators</label>-->
<!--                                    <textarea cols="30" id="additionalGMs" name="additionalGMs" rows="3" x-model="eventInfo.additionalGMs"></textarea>-->
<!--                                </div>-->
                                <div>
                                    <label for="additionalRequirements">Additional Information</label>
                                    <textarea cols="30" id="additionalRequirements" name="additionalRequirements" rows="3" x-model="eventInfo.additionalRequirements"></textarea>
                                </div>
                            </fieldset>
                            <button type="submit" :disabled="!isSchedulingInfoComplete">Submit</button>
                        </form>
                    </div>
                    {# END event submission div #}
                    {# event submitted #}
                    <div class="prose" x-show="eventSubmitted" id="event-submitted">
                        <h2>Thanks for submitting your event!</h2>
                        <p>Our staff will review your <span x-text="eventInfo.format"></span> event, <span x-text="eventInfo.eventName" class="italic font-bold"></span>, and let you know about scheduling it!</p>
                        <p>You can <a href="/run-an-event">submit another event</a> now if you'd like.</p>
                    </div>
                </div>
                {# END runAnEventData component #}
            </section>
        </div>
    </main>
{% endblock %}

{#
    PUT /events/create API
    {
        "accessabilityOptions": "string", //  not used
        "additionalGms": "string", // used
        "additionalRequirements": "string", //used
        "characters": "string", //used
        "contentAdvisory": true, // used but using a checkbox
        "eventCategoryId": 0, // this is format
        "eventDescription": "string", // used
        "eventFacilitators": "string", // not used
        "eventMetadataIds": [
        0
        ], // need to combine multiple
        "eventName": "string", // used
        "gm": "string", // need to convert from publicName?
//        "gmAge": "string", //need to convert from yourAge
        "length": "string", // used but named eventLength
        "minPlayers": "string", //used
        "otherInfo": "string", //used
//        "playerAge": "string", //used
        "players": "string", // this is maxPlayers
//        "playtest": "string", //used
        "requestMediaEquipment": "string", // used
        "requestMediaRoom": true,   // used
        "requestPrivateRoom": true, // use locationPref for boolean and add rest to additionalRequirements 
//        "runNumberOfTimes": 0, // used
        "safetyTools": "string", // used convert to string
        "schedulingPref": "string", // convert to string
        "system": "string", //  used
//        "tableType": "string",  // used
        "triggerWarnings": "string",    // used
        "userDisplayName": "string" , // matches user.displayName
    }
 #}

{% block pagebottom %}

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            // Check if variable is a string with stuff in it
            function isFull(str) {
                return (!!str && typeof str === 'string' && str.trim().length !== 0);
            }

            function convertToCreateEventAPI(eventInfo) {
                // const eventMetadataIds = [
                    //...eventInfo.playerContributions,
                    // ...eventInfo.gameTags,
                    // ...eventInfo.gameFocus,
                    // ...eventInfo.gameMood,
                    // ...eventInfo.gameGenre,
                    // ...eventInfo.contentAdvisoryOptions,
                    // ...eventInfo.panelTopic
                // ].map(id => parseInt(id));

                eventInfo = {
                    accessabilityOptions: eventInfo
                        .accessibilityOptions
                        .toString(),
                    additionalGms: null, //eventInfo.additionalGMs,
                    additionalRequirements: eventInfo.additionalRequirements, // + " Room Request: " + eventInfo.locationPref,
                    characters: eventInfo.characters,
                    contentAdvisory: 0, //eventInfo.contentAdvisory !== "Yes", // this is a boolean in the API so we are using 1000000 is no-content-advisory; selection info goes into the eventMetadataIds
                    eventCategoryId: parseInt(eventInfo.format),
                    eventDescription: eventInfo.eventDescription,
                    //eventFacilitators: eventInfo.facilitators,
                    eventMetadataIds: [], //eventMetadataIds,
                    eventName: eventInfo.eventName,
                    format: eventInfo.format,
                    gm: eventInfo.publicName,
                    gmAge: '18+', //dummy value
                    length: eventInfo.eventLength,
                    minPlayers: eventInfo.minPlayers,
                    otherInfo: eventInfo.otherInfo,
                    playerAge: '18+', //dummy value
                    players: eventInfo.maxPlayers,
                    playtest: 0,
                    // playtest: (eventInfo.playtest === 'Yes')
                    //     ? 1
                    //     : 0,
                    requestMediaEquipment: eventInfo.requestMediaEquipment === "Yes",
                    requestMediaRoom: eventInfo.requestMediaRoom === "Yes",
//                    requestPrivateRoom: eventInfo.locationPref !== "No Preference", // add extra to additionalRequirements for now
                    runNumberOfTimes: 1, //dummy value
                    safetyTools: eventInfo
                        .safetyTools
                        .toString(),
                    schedulingPref: eventInfo
                        .schedulePref
                        .toString(),
                    eventStartDate: eventInfo.scheduleTimeDetails[
                        eventInfo.schedulePref.date],
                    eventStartTime: eventInfo.scheduleTimeDetails[
                        eventInfo.schedulePref.time],
                    eventTags: eventInfo
                        .eventTags
                        .toString(),
                    system: eventInfo.system,
//                    tableType: eventInfo.tableType,
                    triggerWarnings: eventInfo.triggerWarnings,
                    userDisplayName: eventInfo.userDisplayName
                }
                return eventInfo;
            }

            Alpine.data('runAnEventData', function () {
                return {
                    eventSubmitted: false,
                    eventInfo: {
                        // -- Personal Info
                        publicName: '', //required
                        //yourAge: '', //required
                        communityStandards: false,
                        // -- Event Info
                        eventName: '', //required
                        format: '', //required
                        system: '', //required only isGame
//                        playtest: '', //required only isGame
                        eventDescription: '', //required
                        otherInfo: '',
                        // imageUpload not working yet
                        // -- Player Info
                        //playerAge: '', //required if yourAge = "18+"
                        minPlayers: '', //required if isGame
                        maxPlayers: '', //required if isGame
                        characters: '', //not required
                        // -- Scheduling Info
//                        runNumberOfTimes: '', //required
//                        locationPref: '', //required if isTabletop
//                        tableType: '', //required if Board/Card game
//                        mediaEquipment: '', //required if not isGame
//                        mediaEquipmentRequested: '', //required if mediaEquipment = "Equipment Requested"
                        eventLength: null, //required
                        schedulePref: '', // not required
                        // -- Content Advisory
                        contentAdvisory: '', //required
                        contentAdvisoryOptions: '', //not required
                        triggerWarnings: '', //not required
                        safetyTools: '', //not required
                        // -- Additional Info
                        panelTopic: '', //not required
                        gameTags: '', //not required
                        // gameFocus: '', //not required
                        // playerContributions: '', //not required
                        // gameGenre: '', //not required
                        // gameMood: '', //not required
                        // additionalGMs: '', //not required
                        additionalRequirements: '', //not required
                        eventTags: '', //not required
                    },
                    get isPersonalInfoComplete() {
                        const x = this.eventInfo;
                        //return [x.publicName, x.yourAge].every(isFull) && x.communityStandards;
                        return [x.publicName].every(isFull) && x.communityStandards;
                    },
                    get isEventInfoComplete() {
                        const x = this.eventInfo;
                        let fields = [x.eventName, x.format, x.eventDescription]
                        if (this.isGame) 
                            fields = [
                                ...fields,
                                x.system //,
//                                x.playtest
                            ]
                            // otherInfo and image upload not required
                        return (this.isPersonalInfoComplete && fields.every(isFull));
                    },
                    get isPlayerInfoComplete() {
                        const x = this.eventInfo;
                        //let fields = [x.playerAge, x.minPlayers, x.maxPlayers]
                        let fields = [x.minPlayers, x.maxPlayers]
                        if (this.isRPGorLARP)
                            fields = [
                                ...fields,
                                x.characters
                            ]
                        return (this.isEventInfoComplete && fields.every(isFull));
                    },
                    get isSchedulingInfoComplete() {
                        const x = this.eventInfo
                        //let fields = [x.runNumberOfTimes, x.eventLength]
                        let fields = [x.eventLength]
                        // if (this.isTableTop)
                        //     fields = [
                        //         ...fields,
                        //         x.locationPref
                        //     ]
                        // if (this.isBoardgame)
                        //     fields = [
                        //         ...fields,
                        //         x.tableType
                        //     ]
                        // if (!this.isGame)
                        //     fields = [
                        //         ...fields,
                        //         x.mediaRoom
                        //     ]
                        return (this.isPlayerInfoComplete && fields.every(isFull));
                    },
                    validate(event) {
                        const target = event.target;
                        const parent = target.parentNode;
                        // console.log("validate", event);
                        if (target.value === '') {
                            parent
                                .classList
                                .add('error-required');
                        } else {
                            parent
                                .classList
                                .remove('error-required');
                        } //TODO: add test to see if isNumber
                    },
                    submitEvent() {
                        console.log("submit", convertToCreateEventAPI(this.eventInfo))
                        const y = 0

                        const submitNow = () => {
                            this.createEvent()
                            this.eventSubmitted = true
                        }

                        const scrollEventListener = () => {
                            if (window.pageYOffset === 0) {
                                submitNow();
                                window.removeEventListener('scroll', scrollEventListener)
                            }
                        }
                        function checkScrollEnd() {
                            window.addEventListener('scroll', scrollEventListener);
                        }
                        checkScrollEnd()
                        window.scroll({top: y, behavior: 'smooth'});
                    },
                    async createEvent() {
                        const eventInfo = convertToCreateEventAPI(this.eventInfo)
                        console.log(eventInfo)
                        let data = await fetchData('/events/create', {
                            method: 'PUT',
                            body: convertToCreateEventAPI(this.eventInfo)
                        })
                        return data
                    },
                    setCheckboxArray(el, arrayName) {
                        this.eventInfo[arrayName] = this.eventInfo[arrayName] || [];
                        // if checked then add value to array; otherwise remove
                        if (el.checked) {
                            this.eventInfo[arrayName] = [
                                ...this.eventInfo[arrayName],
                                el.value
                            ]
                        } else {
                            this.eventInfo[arrayName] = this
                                .eventInfo[arrayName]
                                .filter(item => item !== el.value)
                        }
                        //console.log(this.eventInfo[arrayName])
                    },
                    // times1hr: [
                    //     "Friday afternoon (between 2PM-6PM)",
                    //     "Friday night (between 8PM-Midnight)",
                    //     "Saturday morning (between 9AM-1PM)",
                    //     "Saturday afternoon (between 2PM-6PM)",
                    //     "Saturday night (between 8PM-Midnight)",
                    //     "Sunday morning (between 9AM-1PM)",
                    //     "Sunday afternoon (between 2PM-6PM)"
                    // ],
                    scheduleTimes: {
                        // "0": [],
                        // "1": [
                        //     "Friday morning (between 9AM-1PM)",
                        //     "Friday afternoon (between 2PM-6PM)",
                        //     "Friday night (between 8PM-Midnight)",
                        //     "Saturday morning (between 9AM-1PM)",
                        //     "Saturday afternoon (between 2PM-6PM)",
                        //     "Saturday night (between 8PM-Midnight)",
                        //     "Sunday morning (between 9AM-1PM)",
                        //     "Sunday afternoon (between 2PM-6PM)"
                        // ],
                        // "2": [
                        //     "Friday 9AM-11AM",
                        //     "Friday 11AM-1PM",
                        //     "Friday 2PM-4PM",
                        //     "Friday 4PM-6PM",
                        //     "Friday 8PM-10PM",
                        //     "Friday 10PM-Midnight",
                        //     "Saturday 9AM-11AM",
                        //     "Saturday 11AM-1PM",
                        //     "Saturday 2PM-4PM",
                        //     "Saturday 4PM-6PM",
                        //     "Saturday 8PM-10PM",
                        //     "Saturday 8PM-Midnight",
                        //     "Sunday 9AM-11AM",
                        //     "Sunday 11AM-1PM",
                        //     "Sunday 2PM-4PM",
                        //     "Sunday 4PM-6PM"
                        // ],
                        // "4": [
                        //     "Friday 9AM-1PM",
                        //     "Friday 2PM-6PM",
                        //     "Friday 8PM-Midnight",
                        //     "Saturday 9AM-1PM",
                        //     "Saturday 2PM-6PM",
                        //     "Saturday 8PM-Midnight",
                        //     "Sunday 9AM-1PM",
                        //     "Sunday 2PM-6PM"
                        // ],
                        // "6": [
                        //     "Friday 10AM-4PM",
                        //     "Friday 6PM-Midnight",
                        //     "Saturday 10AM-4PM",
                        //     "Saturday 6PM-Midnight",
                        //     "Sunday 9AM-3PM",
                        //     "Sunday 2PM-8PM"
                        // ],
                        // "8": [
                        //     "Friday 10AM-6PM",
                        //     "Friday 2PM-10PM",
                        //     "Saturday 10AM-6PM",
                        //     "Saturday 2PM-10PM",
                        //     "Sunday 10AM-6PM"],
                        "-1": [
                            "Saturday Morning",
                            "Saturday Afternoon",
                            "Saturday Evening",
                            "Sunday Morning",
                            "Sunday Afternoon"
                        ],
                    },
                    scheduleTimeDetails: {
                        "Saturday Morning": {
                            "date": this.eventDates[2],
                            "time": "09:30:00"
                        },
                        "Saturday Afternoon": {
                            "date": this.eventDates[2],
                            "time": "14:00:00"
                        },
                        "Saturday Evening": {
                            "date": this.eventDates[2],
                            "time": "19:00:00"
                        },
                        "Sunday Morning": {
                            "date": this.eventDates[3],
                            "time": "11:00:00"
                        },
                        "Sunday Afternoon": {
                            "date": this.eventDates[3],
                            "time": "16:00:00"
                        }
                    },
                    eventDates: {
                        1: "2022-09-30",
                        2: "2022-10-01",
                        3: "2022-10-02"
                    },
                    findName(array, name) {
                        return array.find(e => e.name === name)
                    },
                    formatId(name) {
                        return this
                            .format
                            .find(e => e.name === name)
                            .id
                            .toString()
                    },
                    get isGame() {
                        return ["RPG", "LARP", "Board/Card Game"].includes(this.eventInfo.format)
                    },
                    get isRPGorLARP() {
                        return ["RPG", "LARP"].includes(this.eventInfo.format)
                    },
                    get isTableTop() {
                        return ["RPG", "Board/Card Game"].includes(this.eventInfo.format)
                    },
                    get isBoardgame() {
                        return this.eventInfo.format === "Board/Card Game"
                    },
                    format: [
                        {
                            "id": 27,
                            "name": "Board/Card Game",
                            "slug": "board-card-game"
                        },
                        {
                            "id": 28,
                            "name": "LARP",
                            "slug": "larp"
                        },
                        // {
                        //     "id": 30,
                        //     "name": "Panel",
                        //     "slug": "panel"
                        // },
                        {
                            "id": 29,
                            "name": "RPG",
                            "slug": "rpg"
                        },
                        // {
                        //     "id": 31,
                        //     "name": "Workshops",
                        //     "slug": "workshops"
                        // }
                    ],
                    // panelTopic: [],
                    // gameTags: [
                    //     {
                    //         "id": 35,
                    //         "name": "Diceless",
                    //         "slug": "diceless"
                    //     }, {
                    //         "id": 34,
                    //         "name": "GMless",
                    //         "slug": "gmless"
                    //     }, {
                    //         "id": 36,
                    //         "name": "Map-Building",
                    //         "slug": "map-building"
                    //     }, {
                    //         "id": 37,
                    //         "name": "Non-Violent",
                    //         "slug": "non-violent"
                    //     }, {
                    //         "id": 39,
                    //         "name": "Other",
                    //         "slug": "other"
                    //     }, {
                    //         "id": 32,
                    //         "name": "Playtest",
                    //         "slug": "playtest"
                    //     }, {
                    //         "id": 33,
                    //         "name": "Run by Designer",
                    //         "slug": "run-by-designer"
                    //     }, {
                    //         "id": 38,
                    //         "name": "World Building",
                    //         "slug": "world-building"
                    //     }
                    // ],
                    // gameFocus: [],
                    // playerContributions: [],
                    // gameGenre: [],
                    // gameMood: [],
                    // contentAdvisoryOptions: [
                    //     {
                    //         "id": 91,
                    //         "name": "Gore",
                    //         "slug": "gore"
                    //     }, {
                    //         "id": 90,
                    //         "name": "Graphic Violence",
                    //         "slug": "graphic-violence"
                    //     }, {
                    //         "id": 88,
                    //         "name": "Provocative",
                    //         "slug": "provocative"
                    //     }, {
                    //         "id": 89,
                    //         "name": "Sex and Sexuality",
                    //         "slug": "sex-and-sexuality"
                    //     }
                    // ],
                    safetyTools: [
                        'X-card',
                        'Script Change',
                        'Stoplight',
                        'Support Flower',
                        'Lines and Veils',
                        'Palette',
                        'Pause/Retcon/Fade to Black',
                        'Other'
                    ],
                    accessibilityOptions: [
                        'Text Only',
                        'Outside Portal/Site',
                        'Video',
                        'Audio/Voice',
                        'Other'
                    ],
                    eventTags: [
                        'Diceless',
                        'GMless',
                        'Map-Building',
                        'Non-Violent',
                        'Other',
                        'Playtest',
                        'Run by Designer',
                        'World Building',
                    ]
                }
            })
        })
    </script>

{% endblock %}