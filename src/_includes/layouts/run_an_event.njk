{% extends 'layouts/base.njk' %}

{% block header %}
    {% include 'components/header.njk' %}
{% endblock %}

{% block content %}
    <main id="content">
        <div class="mx-auto max-w-content p-base">
            <h1 class="font-serif text-4xl font-bold leading-none md:text-5xl text-header mb-base">{{title}}</h1>
            <div class="prose">{{ content | safe }}</div>
            <section class="my-base">
                {# START Submit Form: only show if logged in #}
                <div x-cloak x-show="!isAuth" class="prose">
                    <p>You must be <button @click.stop="modal = 'login'" class="font-bold underline text-highlight">logged in</button> to submit a game</p>
                </div>

                <div x-cloak x-show="isAuth && user" x-data="runAnEventData">
                    <div x-show="!eventSubmitted" id="submit-your-event">
                        <header class="prose">
                            <h2>Submit Your Event</h2>
                            <p>
                                <span class="font-bold text-highlight">*</span>
                                <em>required field</em>
                            </p>
                        </header>
                        {# TODO: Get Submit working. Make sure to zero out everything on submit #}
                        <form action="post" class="mt-base" id="form-run-an-event">
                            <input type="hidden" x-model="eventInfo.userDisplayName" x-init="eventInfo.userDisplayName = user && user.displayName; $watch('user', value => eventInfo.userDisplayName = value && value.displayName)">
                            {# Personal Info #}
                            <fieldset>
                                <legend>Personal Info</legend>
                                <div class="required">
                                    <label for="publicName">Public Badge Name</label>
                                    <p class="text-xs mb-sm text-body">We encourage attendees to list their first and last names. However, if for privacy reasons you would like to use another name, enter it here.</p>
                                    <input id="publicName" name="publicName" type="text" value="" 
                                    x-init="eventInfo.publicName = user && user.displayName; $watch('user', value => eventInfo.publicName = value && value.displayName)" 
                                    x-model="eventInfo.publicName" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="yourAge">
                                        Your age as of
                                        <span>{{sitemeta.eventDate}}</span>
                                    </label>
                                    <select id="yourAge" name="yourAge" x-model="eventInfo.yourAge" @change="if (eventInfo.yourAge === '13+') eventInfo.playerAge = '13+'" @blur="validate">
                                        <option :disabled="eventInfo.yourAge !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>13+</option>
                                        <option>18+</option>
                                    </select>
                                </div>
                            </fieldset>
                            {# END Personal Info #}
                            {# Event Info - Personal Info must be complete before showing #}
                            <fieldset class="transition-opacity" :class="(isPersonalInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Event Info</legend>
                                <div class="required">
                                    <label for="eventName">Event Name</label>
                                    <input id="eventName" name="eventName" type="text" value="" x-model="eventInfo.eventName" @blur="validate" class="w-full max-w-md"/>
                                </div>
                                <div class="required">
                                    <label for="format">Format</label>
                                    <select id="format" name="format" x-model="eventInfo.format" @blur="validate">
                                        <option :disabled="eventInfo.format !== ''" selected value="">-- Choose One --</option>
                                        <template x-for="type in format">
                                            <option :value="type.id" x-text="type.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div x-show="isGame" class="required">
                                    <label for="system">System</label>
                                    <input id="system" name="system" type="text" value="" x-model="eventInfo.system" @blur="validate"/>
                                </div>
                                <div x-show="isGame" class="required">
                                    <label for="playtest">Is this a playtest?</label>
                                    <select id="playtest" name="playtest" x-model="eventInfo.playtest" @blur="validate" >
                                        <option :disabled="eventInfo.playtest !== ''" selected value="">-- Choose One --</option>
                                        <option>No</option>
                                        <option>Yes</option>
                                    </select>
                                </div>
                                <div class="required">
                                    <label for="eventDescription">Description</label>
                                    <textarea cols="30" id="eventDescription" name="eventDescription" rows="3" x-model="eventInfo.eventDescription" @blur="validate"></textarea>
                                </div>
                                <div>
                                    <label for="otherInfo">Other info we should know (this will not go in the program)</label>
                                    <textarea cols="30" id="otherInfo" name="otherInfo" rows="3" x-model="eventInfo.otherInfo"></textarea>
                                </div>
                                <div>
                                    {# TODO: get image upload working #}
                                    <label for="imageUpload">Image Upload (NOT CURRENTLY WORKING)</label>
                                    <input id="imageUpload" name="imageUpload" type="text" value="" x-model="eventInfo.imageUpload"/>
                                </div>
                            </fieldset>
                            {# END Event Info #}
                            {# Player/Attendee Info - all above must be completed #}
                            <fieldset class="transition-opacity" :class="(isEventInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Player/Attendee Info</legend>
                                <div x-show="eventInfo.playerAge === '13+'" class="prose mb-base">
                                    <p class="italic">Event designed for people aged 13+</p>
                                </div>
                                <div x-show="eventInfo.yourAge === '18+'" class="required">
                                    <label for="playerAge">
                                        Player/Attendee Age
                                    </label>
                                    <select id="playerAge" name="playerAge" x-model="eventInfo.playerAge" @blur="validate">
                                        <option :disabled="eventInfo.playerAge !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>13+</option>
                                        <option>18+</option>
                                    </select>
                                </div>
                                {# Only required for games #}
                                <div x-show="isGame" class="required">
                                    <label for="minPlayers">Minimum players/attendees</label>
                                    <input id="minPlayers" name="minPlayers" type="text" value="" x-model="eventInfo.minPlayers" @blur="validate"/>
                                </div>
                                {# Only required for games #}
                                <div x-show="isGame" class="required">
                                    <label for="maxPlayers" >Maximum players/attendees</label>
                                    <input id="maxPlayers" name="maxPlayers" type="text" value="" x-model="eventInfo.maxPlayers" @blur="validate"/>
                                </div>
                                <div x-show="isRPGorLARP" class="required">
                                    <label for="characters">Characters</label>
                                    <select id="characters" name="characters" x-model="eventInfo.characters" @blur="validate">
                                        <option :disabled="eventInfo.characters !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>Provided</option>
                                        <option>Created at the table</option>
                                        <option>Other/Does not apply</option>
                                    </select>
                                </div>
                            </fieldset>
                            {# END Player Attendee Info #}
                            {# Scheduling Info - player age must be completed #}
                            <fieldset class="transition-opacity" :class="(isPlayerInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Scheduling Info</legend>
                                <div class="required">
                                    <label for="runNumberOfTimes">Run this event</label>
                                    <select id="runNumberOfTimes" name="runNumberOfTimes" x-model="eventInfo.runNumberOfTimes" @blur="validate">
                                        <option :disabled="eventInfo.runNumberOfTimes !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option value="1">Once</option>
                                        <option value="2">Twice</option>
                                        <option value="3">I want to run this 3 times! Whoa!</option>
                                        <option value="4">I want to run this 4 times! Yow!!!</option>
                                    </select>
                                </div>
                                <div x-show="isTableTop" class="required">
                                    <label for="locationPref">Location Preference</label>
                                    <select id="locationPref" name="locationPref" x-model="eventInfo.locationPref" @blur="validate">
                                        <option :disabled="eventInfo.locationPref !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>No Preference</option>
                                        <option>Private Room</option>
                                        <option>Outdoor Pavilion</option>
                                        <option>Atrium</option>
                                    </select>
                                </div>
                                <div x-show="isBoardgame" class="required">
                                    <label for="tableType">Board game table type requested</label>
                                    <select id="tableType" name="tableType" x-model="eventInfo.tableType" @blur="validate">
                                        <option :disabled="eventInfo.tableType !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>Long</option>
                                        <option>Round</option>
                                        <option>Either</option>
                                    </select>
                                </div>
                                <div x-show="!isGame" class="required">
                                    <label for="mediaRoom">Request media room</label>
                                    <select id="mediaRoom" name="mediaRoom" x-model="eventInfo.mediaRoom" @blur="validate">
                                        <option :disabled="eventInfo.mediaRoom !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>No</option>
                                        <option>Yes</option>
                                    </select>
                                </div>
                                <div x-show="eventInfo.mediaRoom === 'Yes'" class="required">
                                    <label for="mediaEquipment">Media equipment</label>
                                    <select id="mediaEquipment" name="mediaEquipment" x-model="eventInfo.mediaEquipment" @blur="validate">
                                        <option :disabled="eventInfo.mediaEquipment !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>I have my own</option>
                                        <option>Equipment requested</option>
                                    </select>
                                </div>
                                <div x-show="eventInfo.mediaEquipment === 'Equipment requested'" class="required">
                                    <label for="mediaEquipmentRequested">Media equipment requested</label>
                                    <input id="mediaEquipmentRequested" name="mediaEquipmentRequested" type="text" value="" x-model="eventInfo.mediaEquipmentRequested" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="eventLength">Event Length</label>
                                    <select id="eventLength" name="eventLength" x-model="eventInfo.eventLength" @blur="validate">
                                        <option :disabled="eventInfo.eventLength !== '0'" selected value="0">
                                            -- Choose One --
                                        </option>
                                        <option value="1">1 hour</option>
                                        <option value="2">2 hours</option>
                                        <option value="4">4 hours</option>
                                        <option value="6">6 hours</option>
                                        <option value="8">8 hours</option>
                                    </select>
                                </div>
                                <div x-show="eventInfo.eventLength">
                                    <label for="schedulePref">Schedule Preferences</label>
                                    <template x-for="(time, i) in scheduleTimes[eventInfo.eventLength]">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'time' + i" :id="'time' + i" :value="time" @change="setCheckboxArray($el,'schedulePref')">
                                            <label :for="'time' + i" x-text="time"></label>
                                        </div>
                                    </template>
                                </div>
                            </fieldset>
                            {# END Scheduling Info #}
                            {# Content Advisory & Safety Tools - show only if scheduling is completed #}
                            <fieldset class="transition-opacity" :class="(isSchedulingInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Content Advisory &amp; Safety Tools</legend>
                                <div x-show="eventInfo.playerAge === '13+'" class="prose mb-base">
                                    <p class="italic">Event designed for people aged 13+</p>
                                </div>
                                <div x-show="eventInfo.playerAge === '18+'" class="prose mb-base">
                                    <p class="italic">Event designed for people aged 18+</p>
                                </div>
                                {# Break out to Maturity level and other stuff #}
                                {# No Content Advisory vs Adult themes. Then add new list which is meta #}
                                <div x-show="eventInfo.playerAge === '18+'" class="required">
                                    <label>Content Advisory</label>
                                    <select id="contentAdvisory" name="contentAdvisory" x-model="eventInfo.contentAdvisory" @blur="validate">
                                        <option :disabled="eventInfo.contentAdvisory !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option value="No">No content advisory needed</option>
                                        <option value="Yes">Yes, contains strong content</option>
                                    </select>

                                </div>
                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory === 'Yes'">
                                    <label>Types of Content Advisory</label>
                                    <template x-for="(type, i) in contentAdvisoryOptions">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'contentAdvisoryOptions' + i" :id="'contentAdvisoryOptions' + i" :value="type.id" @change="setCheckboxArray($el,'contentAdvisoryOptions')">
                                            <label :for="'contentAdvisoryOptions' + i" x-text="type.name"></label>
                                        </div>
                                    </template>
                                </div>
                                <div x-show="eventInfo.playerAge === '18+'">
                                    <label for="triggerWarnings">Potential trigger warnings</label>
                                    <input id="triggerWarnings" name="triggerWarnings" type="text" value="" x-model="eventInfo.triggerWarnings" class="w-full max-w-md"/>
                                </div>
                                <div x-show="isGame">
                                    <label>Safety Tools</label>
                                    <template x-for="(type, i) in safetyTools">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'safetyTools' + i" :id="'safetyTools' + i" :value="type" @change="setCheckboxArray($el,'safeyTools')">
                                            <label :for="'safetyTools' + i" x-text="type"></label>
                                        </div>
                                    </template>
                                </div>
                            </fieldset>
                            {# END Content Advisory & Safety Tools #}
                            {# Additional Info - not required #}
                            <fieldset class="transition-opacity" :class="(isSchedulingInfoComplete) ? 'opacity-100 pointer-events-auto' : 'pointer-events-none opacity-20'">
                                <legend>Additional Info</legend>
                                <div x-show="eventInfo.format === formatId('Panel')">
                                    <label>Panel Topic</label>
                                    <template x-for="(type, i) in panelTopic">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'panelTopic' + i" :id="'panelTopic' + i" :value="type.id" @change="setCheckboxArray($el,'panelTopic')">
                                            <label :for="'panelTopic' + i" x-text="type.name"></label>
                                        </div>
                                    </template>
                                </div>
                                <div x-show="isGame">
                                    <label>Game Focus</label>
                                    <div>
                                        <template x-for="(type, i) in gameFocus">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'gameFocus' + i" :id="'gameFocus' + i" :value="type.id"  @change="setCheckboxArray($el,'gameFocus')">
                                                <label :for="'gameFocus' + i" x-text="type.name"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Player Contributions</label>
                                    <div>
                                        <template x-for="(type, i) in playerContributions">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'playerContributions' + i" :id="'playerContributions' + i" :value="type.id" @change="setCheckboxArray($el,'playerContributions')">
                                                <label :for="'playerContributions' + i" x-text="type.name"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Game Genre</label>
                                    <div>
                                        <template x-for="(type, i) in gameGenre">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'gameGenre' + i" :id="'gameGenre' + i" :value="type.id" @change="setCheckboxArray($el,'gameGenre')">
                                                <label :for="'gameGenre' + i" x-text="type.name"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div x-show="isGame">
                                    <label>Game Mood</label>
                                    <div>
                                        <template x-for="(type, i) in gameMood">
                                            <div class="flex items-center">
                                                <input type="checkbox" :name="'gameMood' + i" :id="'gameMood' + i" :value="type.id" @change="setCheckboxArray($el,'gameMood')">
                                                <label :for="'gameMood' + i" x-text="type.name"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                <div>
                                    <label for="additionalGMs">List any additional GMs/facilitators</label>
                                    <textarea cols="30" id="additionalGMs" name="additionalGMs" rows="3" x-model="eventInfo.additionalGMs"></textarea>
                                </div>
                                <div>
                                    <label for="additionalRequirements">List any special requirements</label>
                                    <textarea cols="30" id="additionalRequirements" name="additionalRequirements" rows="3" x-model="eventInfo.additionalRequirements"></textarea>
                                </div>
                            </fieldset>
                            {# <button type="submit" @click.prevent="submitEvent" :disabled="!isSchedulingInfoComplete">Submit</button> #}
                            <button type="submit" @click.prevent="submitEvent">Submit</button>
                        </form>
                    </div>
                    {# END event submission div #}
                    {# event submitted #}
                    <div class="prose" x-show="eventSubmitted" id="event-submitted">
                        <h2>Thanks for submitting your event!</h2>
                        <p>Our staff will review your <span x-text="formatType"></span> event, <span x-text="eventInfo.eventName" class="italic font-bold"></span>, and let you know about scheduling it!</p>
                        <p>You can <button @click="submitNewEvent" class="font-bold underline text-highlight">submit another event</button> now if you'd like.</p>
                    </div>
                    {# Testing purposes only #}
                    {# <div class="prose border rounded mt-lg p-base bg-card border-header">
                        <h2>Testing purposes only</h2>
                        <p>Listing of event form selections</p>
                        <ul>
                            <template x-for="(type, i) in eventInfo">
                                <li x-show="type && type !== ''" x-text="i + ': ' +type"></li>
                            </template>
                        </ul>
                    </div> #}
                </div>
                {# END runAnEventData component #}
            </section>
        </div>
    </main>
{% endblock %}

{#
    PUT /events/create API
    {
        "accessabilityOptions": "string", //  not used
        "additionalGms": "string", // used
        "additionalRequirements": "string", //used
        "characters": "string", //used
        "contentAdvisory": true, // used but using a checkbox
        "eventCategoryId": 0, // this is format
        "eventDescription": "string", // used
        "eventFacilitators": "string", // not used
        "eventMetadataIds": [
        0
        ], // need to combine multiple
        "eventName": "string", // used
        "gm": "string", // need to convert from publicName?
        "gmAge": "string", //need to convert from yourAge
        "length": "string", // used but named eventLength
        "minPlayers": "string", //used
        "otherInfo": "string", //used
        "playerAge": "string", //used
        "players": "string", // this is maxPlayers
        "playtest": "string", //used
        "requestMediaEquipment": "string", // used
        "requestMediaRoom": true,   // used
        "requestPrivateRoom": true, // use locationPref for boolean and add rest to additionalRequirements 
        "runNumberOfTimes": 0, // used
        "safetyTools": "string", // used convert to string
        "schedulingPref": "string", // convert to string
        "system": "string", //  used
        "tableType": "string",  // used
        "triggerWarnings": "string",    // used
        "userDisplayName": "string" , // matches user.displayName
    }
 #}

{% block pagebottom %}

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            // Check if variable is a string with stuff in it
            function isNotEmptyString(value) {
                return value && value !== ''
            }

            // Used to void variables
            const eventInfoDefault = {
                // -- Personal Info
                //userDisplayName: '',  hidden; matches user.displayName; don't void
                //publicName: '', required; don't void
                yourAge: '', //required
                // -- Event Info
                eventName: '', //required
                format: '', //required
                system: '', //required only isGame
                playtest: '', //required only isGame
                eventDescription: '', //required
                otherInfo: '',
                // imageUpload not working yet
                // -- Player Info
                playerAge: '', //required if yourAge = "18+"
                minPlayers: '', //required if isGame
                maxPlayers: '', //required if isGame
                characters: '', //not required
                // -- Scheduling Info
                runNumberOfTimes: '', //required
                locationPref: '', //required if isTabletop
                tableType: '', //required if Board/Card game
                mediaEquipment: '', //required if not isGame
                mediaEquipmentRequested: '', //required if mediaEquipment = "Equipment Requested"
                eventLength: null, //required
                schedulePref: '', // not required
                // -- Content Advisory
                contentAdvisory: '', // required
                contentAdvisoryOptions: '', //not required
                triggerWarnings: '', //not required
                safetyTools: '', //not required
                // -- Additional Info
                panelTopic: '', //not required
                gameFocus: '', //not required
                playerContributions: '', //not required
                gameGenre: '', //not required
                gameMood: '', //not required
                additionalGMs: '', //not required
                additionalRequirements: '', //not required
            }

            function convertToCreateEventAPI(eventInfo) {
                eventInfo = {
                    ...eventInfo,
                    gmAge: eventInfo.yourAge,
                    contentAdvisory: eventInfo.contentAdvisory !== "Yes", // this is a boolean in the API so we are using 1000000 is no-content-advisory; selection info goes into the eventMetadataIds
                    eventCategoryId: eventInfo.format,
                    gm: eventInfo.publicName,
                    length: eventInfo.eventLength,
                    players: eventInfo.maxPlayers,
                    playtest: (eventInfo.playtest === 'Yes')
                        ? 1
                        : 0,
                    requestMediaEquipment: eventInfo.requestMediaEquipment === "Yes",
                    requestMediaRoom: eventInfo.requestMediaRoom === "Yes",
                    requestPrivateRoom: eventInfo.locationPref !== "No Preference", // add extra to additionalRequirements for now
                    additionalRequirements: eventInfo.additionalRequirements + "; Room Request: " + eventInfo.locationPref,
                    eventMetadataIds: [
                        ...eventInfo.playerContributions,
                        ...eventInfo.gameFocus,
                        ...eventInfo.gameMood,
                        ...eventInfo.gameGenre,
                        ...eventInfo.contentAdvisoryOptions,
                        ...eventInfo.panelTopic
                    ],
                    schedulePref: eventInfo
                        .schedulePref
                        .toString(),
                    safetyTools: eventInfo
                        .safetyTools
                        .toString()
                }
                return eventInfo;
            }

            Alpine.data('runAnEventData', function () {
                return {
                    eventSubmitted: false,
                    eventInfo: {
                        // -- Personal Info
                        publicName: '', //required
                        yourAge: '', //required
                        // -- Event Info
                        eventName: '', //required
                        format: '', //required
                        system: '', //required only isGame
                        playtest: '', //required only isGame
                        eventDescription: '', //required
                        otherInfo: '',
                        // imageUpload not working yet
                        // -- Player Info
                        playerAge: '', //required if yourAge = "18+"
                        minPlayers: '', //required if isGame
                        maxPlayers: '', //required if isGame
                        characters: '', //not required
                        // -- Scheduling Info
                        runNumberOfTimes: '', //required
                        locationPref: '', //required if isTabletop
                        tableType: '', //required if Board/Card game
                        mediaEquipment: '', //required if not isGame
                        mediaEquipmentRequested: '', //required if mediaEquipment = "Equipment Requested"
                        eventLength: null, //required
                        schedulePref: '', // not required
                        // -- Content Advisory
                        contentAdvisory: '', //required
                        contentAdvisoryOptions: '', //not required
                        triggerWarnings: '', //not required
                        safetyTools: '', //not required
                        // -- Additional Info
                        panelTopic: '', //not required
                        gameFocus: '', //not required
                        playerContributions: '', //not required
                        gameGenre: '', //not required
                        gameMood: '', //not required
                        additionalGMs: '', //not required
                        additionalRequirements: '', //not required
                    },
                    get isPersonalInfoComplete() {
                        return [this.eventInfo.publicName, this.eventInfo.yourAge].every(isNotEmptyString);
                    },
                    get isEventInfoComplete() {
                        let fields = [this.eventInfo.eventName, this.eventInfo.format, this.eventInfo.eventDescription]
                        if (this.isGame) 
                            fields = [
                                ...fields,
                                this.eventInfo.system,
                                this.eventInfo.playtest
                            ]
                            // otherInfo and image upload not required
                        return (this.isPersonalInfoComplete && fields.every(isNotEmptyString));
                    },
                    get isPlayerInfoComplete() {
                        let fields = [this.eventInfo.playerAge]
                        if (this.isGame) 
                            fields = [
                                ...fields,
                                this.eventInfo.minPlayers,
                                this.eventInfo.maxPlayers
                            ]
                        if (this.isRPGorLARP) 
                            fields = [
                                ...fields,
                                this.eventInfo.characters
                            ]
                        return (this.isEventInfoComplete && fields.every(isNotEmptyString));
                    },
                    get isSchedulingInfoComplete() {
                        let fields = [this.eventInfo.runNumberOfTimes, this.eventInfo.eventLength]
                        if (this.isTableTop) 
                            fields = [
                                ...fields,
                                this.eventInfo.locationPref
                            ]
                        if (this.isBoardgame) 
                            fields = [
                                ...fields,
                                this.eventInfo.tableType
                            ]
                        if (!this.isGame) 
                            fields = [
                                ...fields,
                                this.eventInfo.mediaRoom
                            ]
                        return (this.isPlayerInfoComplete && fields.every(isNotEmptyString));
                    },
                    validate(event) {
                        const target = event.target;
                        const parent = target.parentNode;
                        // console.log("validate", event);
                        if (target.value === '') {
                            parent
                                .classList
                                .add('error-required');
                        } else {
                            parent
                                .classList
                                .remove('error-required');
                        } //TODO: add test to see if isNumber
                    },
                    submitEvent() {
                        console.log("submit", this.eventInfo)
                        const y = 0

                        const submitNow = () => {
                            this.createEvent()
                            this.eventSubmitted = true
                            // console.log("api", JSON.stringify(convertToCreateEventAPI(this.eventInfo)))
                            // Zero out all the form fields
                            // this.eventInfo = eventInfoDefault
                        }

                        const scrollEventListener = () => {
                            if (window.pageYOffset === 0) {
                                submitNow();
                                window.removeEventListener('scroll', scrollEventListener)
                            }
                        }
                        function checkScrollEnd() {
                            window.addEventListener('scroll', scrollEventListener);
                        }
                        checkScrollEnd()
                        window.scroll({top: y, behavior: 'smooth'});
                    },
                    async createEvent() {
                        let data = await fetchData('/events/create', {
                            method: 'PUT',
                            body: this.eventInfo
                        })
                        return data
                    },
                    async createEvent2() {
                        const url = '/.netlify/functions/run-an-event/'
                        const authToken = JSON.parse(localStorage.getItem('_x_authToken'))
                        const body = JSON.stringify({
                            ...this.eventInfo,
                            authToken: authToken
                        })
                        const options = {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8',
                                Authorization: authToken
                            },
                            body: JSON.stringify({
                                ...this.eventInfo,
                                authToken: authToken
                            })
                        }
                        try {
                            let response = await fetch(url, options)
                            console.log(`RESPONSE:fetch for ${url}`, response)
                            if (response.status !== 200) 
                                throw `fetch fail status: ${response.status}`
                            let result = await response.json()
                            console.log(`RESULT:fetch for ${url}`, result)
                            return result
                        } catch (err) {
                            console.error(`ERROR:fetch for ${url}`, err)
                            return false
                        }
                    },
                    submitNewEvent() {
                        // Zero out all the form fields
                        this.eventInfo = {
                            ...this.eventInfo,
                            ...eventInfoDefault
                        }
                        // Bring back form
                        this.eventSubmitted = false
                    },
                    setCheckboxArray(el, arrayName) {
                        this.eventInfo[arrayName] = this.eventInfo[arrayName] || [];
                        // if checked then add value to array; otherwise remove
                        if (el.checked) {
                            this.eventInfo[arrayName] = [
                                ...this.eventInfo[arrayName],
                                el.value
                            ]
                        } else {
                            this.eventInfo[arrayName] = this
                                .eventInfo[arrayName]
                                .filter(item => item !== el.value)
                        }
                        //console.log(this.eventInfo[arrayName])
                    },
                    times1hr: [
                        "Friday afternoon (between 2PM-6PM)",
                        "Friday night (between 8PM-Midnight)",
                        "Saturday morning (between 9AM-1PM)",
                        "Saturday afternoon (between 2PM-6PM)",
                        "Saturday night (between 8PM-Midnight)",
                        "Sunday morning (between 9AM-1PM)",
                        "Sunday afternoon (between 2PM-6PM)"
                    ],
                    scheduleTimes: {
                        "0": [],
                        "1": [
                            "Friday morning (between 9AM-1PM)",
                            "Friday afternoon (between 2PM-6PM)",
                            "Friday night (between 8PM-Midnight)",
                            "Saturday morning (between 9AM-1PM)",
                            "Saturday afternoon (between 2PM-6PM)",
                            "Saturday night (between 8PM-Midnight)",
                            "Sunday morning (between 9AM-1PM)",
                            "Sunday afternoon (between 2PM-6PM)"
                        ],
                        "2": [
                            "Friday 9AM-11AM",
                            "Friday 11AM-1PM",
                            "Friday 2PM-4PM",
                            "Friday 4PM-6PM",
                            "Friday 8PM-10PM",
                            "Friday 10PM-Midnight",
                            "Saturday 9AM-11AM",
                            "Saturday 11AM-1PM",
                            "Saturday 2PM-4PM",
                            "Saturday 4PM-6PM",
                            "Saturday 8PM-10PM",
                            "Saturday 8PM-Midnight",
                            "Sunday 9AM-11AM",
                            "Sunday 11AM-1PM",
                            "Sunday 2PM-4PM",
                            "Sunday 4PM-6PM"
                        ],
                        "4": [
                            "Friday 9AM-1PM",
                            "Friday 2PM-6PM",
                            "Friday 8PM-Midnight",
                            "Saturday 9AM-1PM",
                            "Saturday 2PM-6PM",
                            "Saturday 8PM-Midnight",
                            "Sunday 9AM-1PM",
                            "Sunday 2PM-6PM"
                        ],
                        "6": [
                            "Friday 10AM-4PM",
                            "Friday 6PM-Midnight",
                            "Saturday 10AM-4PM",
                            "Saturday 6PM-Midnight",
                            "Sunday 9AM-3PM",
                            "Sunday 2PM-8PM"
                        ],
                        "8": ["Friday 10AM-6PM", "Friday 2PM-10PM", "Saturday 10AM-6PM", "Saturday 2PM-10PM", "Sunday 10AM-6PM"]
                    },
                    findName(array, name) {
                        return array.find(e => e.name === name)
                    },
                    formatId(name) {
                        return this
                            .format
                            .find(e => e.name === name)
                            .id
                            .toString()
                    },
                    get formatType() {
                        const id = parseFloat(this.eventInfo.format)
                        const name = (id)
                            ? this
                                .format
                                .find(e => e.id === parseFloat(this.eventInfo.format))
                                .name
                            : ''
                        return name
                    },
                    get isGame() {
                        return this.eventInfo.format === "8" || this.eventInfo.format === "9" || this.eventInfo.format === "10"
                    },
                    get isRPGorLARP() {
                        return this.eventInfo.format === "8" || this.eventInfo.format === "9"
                    },
                    get isTableTop() {
                        return this.eventInfo.format === "8" || this.eventInfo.format === "10"
                    },
                    get isBoardgame() {
                        return this.eventInfo.format === "10"
                    },
                    format: [
                        {
                            "id": 10,
                            "name": "Board/Card Game",
                            "slug": "board-game",
                            "type": "event-categories"
                        }, {
                            "id": 9,
                            "name": "LARP",
                            "slug": "larp",
                            "type": "event-categories"
                        }, {
                            "id": 202,
                            "name": "Media",
                            "slug": "media",
                            "type": "event-categories"
                        }, {
                            "id": 154,
                            "name": "Panel",
                            "slug": "panel",
                            "type": "event-categories"
                        }, {
                            "id": 8,
                            "name": "RPG",
                            "slug": "rpg",
                            "type": "event-categories"
                        }, {
                            "id": 11,
                            "name": "Seminar",
                            "slug": "seminar",
                            "type": "event-categories"
                        }
                    ],
                    panelTopic: [
                        {
                            "id": 160,
                            "name": "GMing Advice",
                            "slug": "gming-advice",
                            "type": "event-tags"
                        }, {
                            "id": 159,
                            "name": "Literature",
                            "slug": "literature",
                            "type": "event-tags"
                        }, {
                            "id": 161,
                            "name": "Player Advice",
                            "slug": "player-advice",
                            "type": "event-tags"
                        }, {
                            "id": 163,
                            "name": "Safety Tools",
                            "slug": "safety-tools",
                            "type": "event-tags"
                        }, {
                            "id": 162,
                            "name": "Social Contracts",
                            "slug": "social-contracts",
                            "type": "event-tags"
                        }, {
                            "id": 158,
                            "name": "Social Justice",
                            "slug": "social-justice",
                            "type": "event-tags"
                        }
                    ],
                    gameFocus: [
                        {
                            "id": 55,
                            "name": "Adventure",
                            "slug": "adventure",
                            "type": "event-tags"
                        }, {
                            "id": 62,
                            "name": "Combat",
                            "slug": "combat",
                            "type": "event-tags"
                        }, {
                            "id": 59,
                            "name": "Drama",
                            "slug": "drama",
                            "type": "event-tags"
                        }, {
                            "id": 56,
                            "name": "Exploration",
                            "slug": "exploration",
                            "type": "event-tags"
                        }, {
                            "id": 61,
                            "name": "Hijinx",
                            "slug": "hijinx",
                            "type": "event-tags"
                        }, {
                            "id": 191,
                            "name": "Improv",
                            "slug": "improv",
                            "type": "event-tags"
                        }, {
                            "id": 58,
                            "name": "Intrigue",
                            "slug": "intrigue",
                            "type": "event-tags"
                        }, {
                            "id": 57,
                            "name": "Investigation",
                            "slug": "investigation",
                            "type": "event-tags"
                        }, {
                            "id": 181,
                            "name": "LGBTQ themes",
                            "slug": "lgbtq-themes",
                            "type": "event-tags"
                        }, {
                            "id": 167,
                            "name": "Mystery",
                            "slug": "mystery",
                            "type": "event-tags"
                        }, {
                            "id": 60,
                            "name": "Romance",
                            "slug": "romance",
                            "type": "event-tags"
                        }
                    ],
                    playerContributions: [
                        {
                            "id": 66,
                            "name": "Collaborative",
                            "slug": "collaborative",
                            "type": "event-tags"
                        }, {
                            "id": 188,
                            "name": "Freeform",
                            "slug": "freeform",
                            "type": "event-tags"
                        }, {
                            "id": 67,
                            "name": "GM-less",
                            "slug": "gm-less",
                            "type": "event-tags"
                        }, {
                            "id": 64,
                            "name": "Play to find out",
                            "slug": "play-to-find-out",
                            "type": "event-tags"
                        }, {
                            "id": 65,
                            "name": "Player antagonism",
                            "slug": "player-antagonism",
                            "type": "event-tags"
                        }, {
                            "id": 68,
                            "name": "Rotating authority",
                            "slug": "rotating-authority",
                            "type": "event-tags"
                        }, {
                            "id": 63,
                            "name": "Strong storyline",
                            "slug": "strong-storyline",
                            "type": "event-tags"
                        }
                    ],
                    gameGenre: [
                        {
                            "id": 171,
                            "name": "Aliens",
                            "slug": "aliens",
                            "type": "event-tags"
                        }, {
                            "id": 73,
                            "name": "Alternate History",
                            "slug": "alternate-history",
                            "type": "event-tags"
                        }, {
                            "id": 76,
                            "name": "Apocalyptic",
                            "slug": "apocalyptic",
                            "type": "event-tags"
                        }, {
                            "id": 156,
                            "name": "Cyberpunk",
                            "slug": "cyberpunk",
                            "type": "event-tags"
                        }, {
                            "id": 77,
                            "name": "Espionage",
                            "slug": "espionage",
                            "type": "event-tags"
                        }, {
                            "id": 71,
                            "name": "Fantasy",
                            "slug": "fantasy",
                            "type": "event-tags"
                        }, {
                            "id": 69,
                            "name": "Horror",
                            "slug": "horror",
                            "type": "event-tags"
                        }, {
                            "id": 78,
                            "name": "Military",
                            "slug": "military",
                            "type": "event-tags"
                        }, {
                            "id": 72,
                            "name": "Modern",
                            "slug": "modern",
                            "type": "event-tags"
                        }, {
                            "id": 167,
                            "name": "Mystery",
                            "slug": "mystery",
                            "type": "event-tags"
                        }, {
                            "id": 75,
                            "name": "Noir",
                            "slug": "noir",
                            "type": "event-tags"
                        }, {
                            "id": 74,
                            "name": "Pulp",
                            "slug": "pulp",
                            "type": "event-tags"
                        }, {
                            "id": 70,
                            "name": "Sci-Fi",
                            "slug": "sci-fi",
                            "type": "event-tags"
                        }, {
                            "id": 120,
                            "name": "Super Powers",
                            "slug": "super-powers",
                            "type": "event-tags"
                        }
                    ],
                    gameMood: [
                        {
                            "id": 80,
                            "name": "Comical",
                            "slug": "comical",
                            "type": "event-tags"
                        }, {
                            "id": 175,
                            "name": "Cute",
                            "slug": "cute",
                            "type": "event-tags"
                        }, {
                            "id": 82,
                            "name": "Dark",
                            "slug": "dark",
                            "type": "event-tags"
                        }, {
                            "id": 83,
                            "name": "Emotional",
                            "slug": "emotional",
                            "type": "event-tags"
                        }, {
                            "id": 81,
                            "name": "Light",
                            "slug": "light",
                            "type": "event-tags"
                        }, {
                            "id": 133,
                            "name": "Melancholy",
                            "slug": "melancholy",
                            "type": "event-tags"
                        }, {
                            "id": 79,
                            "name": "Serious",
                            "slug": "serious",
                            "type": "event-tags"
                        }, {
                            "id": 187,
                            "name": "Silly",
                            "slug": "silly",
                            "type": "event-tags"
                        }, {
                            "id": 84,
                            "name": "Suspenseful",
                            "slug": "suspenseful",
                            "type": "event-tags"
                        }
                    ],
                    contentAdvisoryOptions: [
                        {
                            "id": 91,
                            "name": "Gore",
                            "slug": "gore",
                            "type": "event-tags"
                        }, {
                            "id": 90,
                            "name": "Graphic Violence",
                            "slug": "graphic-violence",
                            "type": "event-tags"
                        }, {
                            "id": 88,
                            "name": "Provocative",
                            "slug": "provocative",
                            "type": "event-tags"
                        }, {
                            "id": 89,
                            "name": "Sex and Sexuality",
                            "slug": "sex-and-sexuality",
                            "type": "event-tags"
                        }
                    ],
                    safetyTools: [
                        'X-card',
                        'Lines/Veils',
                        'Cut/Brake',
                        'Open Door Policy',
                        'Script Change',
                        'Other'
                    ]
                }
            })
        })
    </script>

{% endblock %}