{% extends 'layouts/base.njk' %}

{% block header %}
    {% include 'components/header.njk' %}
{% endblock %}

{% block content %}
    <main id="content">
        <div class="mx-auto max-w-content p-base">
            <h1 class="font-serif text-4xl font-bold leading-none md:text-5xl text-header mb-base">{{title}}</h1>
            <div class="prose">{{ content | safe }}</div>
            <section class="my-base">
                {# START Submit Form: only show if logged in #}
                <div x-cloak x-show="!isAuth" class="prose">
                    <p>You must be <button @click.stop="modal = 'Login'" class="font-bold underline text-highlight">logged in</button> to submit a game</p>
                </div>

                <div x-cloak x-show="isAuth && user" x-data="runAnEventData">
                    <div x-show="!eventSubmitted" id="submit-your-event">
                        <header class="prose">
                            <h2>Submit Your Event</h2>
                            <p>
                                <span class="font-bold text-highlight">*</span>
                                <em>required field</em>
                            </p>
                        </header>
                        <form class="mt-base" id="form-run-an-event" @submit.prevent="submitEvent">
                            {# TODO: add honeypot #}
                            {# TODO: switch to x-validate #}
                            <input type="hidden" x-model="eventInfo.userDisplayName" x-init="eventInfo.userDisplayName = user && user.displayName; $watch('user', value => eventInfo.userDisplayName = value && value.displayName)">
                            <input type="hidden" x-model="eventInfo.userId" x-init="eventInfo.userId = user && user.id; $watch('user', value => eventInfo.userId = value && value.id)">
                            <input type="hidden" x-model="eventInfo.userEmail" x-init="eventInfo.userEmail = user && user.userEmail; $watch('user', value => eventInfo.userEmail = value && value.userEmail)">
                            {# Personal Info #}
                            <fieldset>
                                <legend>Personal Info</legend>
                                <div class="required">
                                    <label for="publicName">Public Badge Name</label>
                                    <p class="text-xs mb-sm text-body">We encourage attendees to list their first and last names. However, if for privacy reasons you would like to use another name, enter it here.</p>
                                    <input id="publicName" name="publicName" type="text" value="" 
                                    x-init="eventInfo.publicName = (user && user.displayName) || ''; $watch('user', value => eventInfo.publicName = value && value.displayName)" 
                                    x-model="eventInfo.publicName" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="gmAge">
                                        Your age at start of con
                                        <span>{{sitemeta.eventDate}}</span>
                                    </label>
                                    <select id="gmAge" name="gmAge" x-model="eventInfo.gmAge" @change="if (eventInfo.gmAge === '13+') eventInfo.playerAge = '13+'" @blur="validate">
                                        <option :disabled="eventInfo.gmAge !== ''" selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>13+</option>
                                        <option>18+</option>
                                    </select>
                                </div>
                                <div class="required">
                                    <label for="phone">GM contact phone number</label>
                                    <input id="phone" name="phone" type="tel" value="" @blur="validate"/>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Community Standards Agreement</legend>
                                <div class="prose mb-sm">
                                    <p>Big Bad Con is committed to cultivating a culture of respect, support, and kindness at both our in-person and online events. We ask that all of our attendees agree to abide by our Community Standards, please take a moment to read them before answering yes below.</p>
                                    <p>
                                        <a href="/community-standards" class="icon-scroll">Community Standards</a>
                                    </p>
                                </div>
                                <div class="required">
                                    <input type="checkbox" id="agree-to-community-standards" name="agree-to-community-standards" value="Yes" x-model="eventInfo.communityStandards" required>
                                    <label for="agree-to-community-standards" class="text-body-highlight"3324>
                                        Yes &mdash; I, <span x-text="user && user.displayName" class="font-bold"></span>, agree to the Big Bad Con Community Standards
                                    </label>
                                </div>
                            </fieldset>
                            <fieldset :class="!isPersonalInfoComplete && 'fieldset-disabled'">
                                <legend>General Game Info</legend>
                                <div class="required">
                                    <label for="gameLength">Game Length</label>
                                    <select id="gameLength" name="gameLength" x-model="eventInfo.gameLength" @blur="validate" >
                                        <option disabled selected value="">-- Choose One --</option>
                                        <option value="2hr">I want to run two 2 hour games</option>
                                        <option value="4hr">I want to run one 4 hour games</option>
                                    </select>
                                </div>
                                <div x-show="eventInfo.gmAge === '13+'" class="prose mb-base">
                                    <p class="italic">Event designed for people aged 13+</p>
                                </div>
                                <div x-show="eventInfo.gmAge === '18+'" class="required">
                                    <label for="playerAge">
                                        Player/Attendee Age
                                    </label>
                                    <select id="playerAge" name="playerAge" x-model="eventInfo.playerAge" @blur="validate">
                                        <option disabled selected value="">
                                            -- Choose One --
                                        </option>
                                        <option>13+</option>
                                        <option>18+</option>
                                    </select>
                                </div>
                                <div x-data="{safetyTools:['X-card','Lines/Veils','Cut/Brake','Open Door Policy','Script Change','Other']}">
                                    <label>Safety Tools</label>
                                    <template x-for="(type, i) in safetyTools">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'safetyTools' + i" :id="'safetyTools' + i" :value="type" @change="setCheckboxArray($el,'safetyTools')">
                                            <label :for="'safetyTools' + i" x-text="type"></label>
                                        </div>
                                    </template>
                                    <div class="mt-sm" x-show="eventInfo.safetyTools && eventInfo.safetyTools.includes('Other')">
                                        <label for="safetyToolsOther">Other Safety Tools</label>
                                        <input type="text" name="safetyToolsOther" id="safetyToolsOther" x-model="eventInfo.safetyToolsOther"/>
                                    </div>
                                </div>
                            </fieldset>
                            {# Game 1 #}
                            <fieldset :class="!isGeneralInfoComplete && 'fieldset-disabled'">
                                <legend>Game 1: Info</legend>
                                <div class="required">
                                    <label for="gameName">Game Name</label>
                                    <input id="gameName" name="gameName" type="text" value="" x-model="eventInfo.gameName1" @blur="validate" class="w-full max-w-md" maxlength="30"/>
                                </div>
                                <div class="required">
                                    <label for="system">System</label>
                                    <input id="system" name="system" type="text" value="" x-model="eventInfo.system1" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="playtest">Is this a playtest?</label>
                                    <select id="playtest" name="playtest" x-model="eventInfo.playtest1" @blur="validate" >
                                        <option disabled selected value="">-- Choose One --</option>
                                        <option>No</option>
                                        <option>Yes</option>
                                    </select>
                                </div>
                                <div class="required">
                                    <label for="gameDescription">Elevator Pitch</label>
                                    <textarea cols="30" id="gameDescription" name="gameDescription" rows="3" x-model="eventInfo.gameDescription1" @blur="validate" maxlength="250"></textarea>
                                </div>
                                <div class="required">
                                    <label for="minPlayers">Mininum Players</label>
                                    <input type="text" id="minPlayers" name="minPlayers" x-model="eventInfo.minPlayers1" @blur="validate">
                                </div>
                                <div class="required">
                                    <label for="maxPlayers">Maximum Players</label>
                                    <input type="text" id="maxPlayers" name="maxPlayers" x-model="eventInfo.maxPlayers1" @blur="validate">
                                </div>
                                {# TODO: Get image upload working. This is complicated as it does not have an active event.#}
                                {# <div class="prose">
                                    <label for="eventImage">Game Image</label>
                                    <input id="eventImage" name="eventImage" type="file" accept=".jpg,.jpeg,.png,.gif"/>
                                </div> #}
                                <div x-show="eventInfo.playerAge === '18+'" class="required">
                                    <label for="contentAdvisory">Content Advisory</label>
                                    <select id="contentAdvisory" name="contentAdvisory" x-model="eventInfo.contentAdvisory1" @blur="validate">
                                        <option disabled selected value="">
                                            -- Choose One --
                                        </option>
                                        <option value="No">No content advisory needed</option>
                                        <option value="Yes">Yes, contains strong content</option>
                                    </select>

                                </div>
                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory1 === 'Yes'"
                                x-data="{contentAdvisoryOptions:['Gore','Graphic Violence','Provocative','Sex and Sexuality']}">
                                    <label>Types of Content Advisory</label>
                                    <template x-for="(type, i) in contentAdvisoryOptions">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'contentAdvisoryOptions' + i" :id="'contentAdvisoryOptions' + i" :value="type" @change="setCheckboxArray($el,'contentAdvisoryOptions1')">
                                            <label :for="'contentAdvisoryOptions' + i" x-text="type"></label>
                                        </div>
                                    </template>
                                </div>
                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory1 === 'Yes'">
                                    <label for="triggerWarnings">Potential trigger warnings</label>
                                    <input id="triggerWarnings" name="triggerWarnings" type="text" value="" x-model="eventInfo.triggerWarnings1" class="w-full max-w-md"/>
                                </div>
                            </fieldset>
                            {# Game 2 #}
                            <fieldset :class="!isGameOneComplete && 'fieldset-disabled'">
                                <legend>Game 2: Info</legend>
                                <div class="required">
                                    <label for="gameName2">Game Name</label>
                                    <input id="gameName2" name="gameName2" type="text" value="" x-model="eventInfo.gameName2" @blur="validate" class="w-full max-w-md" maxlength="30"/>
                                </div>
                                <div class="required">
                                    <label for="system2">System</label>
                                    <input id="system2" name="system2" type="text" value="" x-model="eventInfo.system2" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="playtest2">Is this a playtest?</label>
                                    <select id="playtest2" name="playtest2" x-model="eventInfo.playtest2" @blur="validate" >
                                        <option disabled selected value="">-- Choose One --</option>
                                        <option>No</option>
                                        <option>Yes</option>
                                    </select>
                                </div>
                                <div class="required">
                                    <label for="gameDescription2">Elevator Pitch</label>
                                    <textarea cols="30" id="gameDescription2" name="gameDescription2" rows="3" x-model="eventInfo.gameDescription2" @blur="validate" maxlength="250"></textarea>
                                </div>
                                <div class="required">
                                    <label for="minPlayers2">Mininum Players</label>
                                    <input type="text" id="minPlayers2" name="minPlayers2" x-model="eventInfo.minPlayers2" @blur="validate">
                                </div>
                                <div class="required">
                                    <label for="maxPlayers2">Maximum Players</label>
                                    <input type="text" id="maxPlayers2" name="maxPlayers2" x-model="eventInfo.maxPlayers2" @blur="validate">
                                </div>
                                {# <div>
                                    <label for="eventImage2">Game Image</label>
                                    <input id="eventImage2" name="eventImage2" type="file" accept=".jpg,.jpeg,.png,.gif"/>
                                </div> #}
                                <div x-show="eventInfo.playerAge === '18+'" class="required">
                                    <label for="contentAdvisory2">Content Advisory</label>
                                    <select id="contentAdvisory2" name="contentAdvisory2" x-model="eventInfo.contentAdvisory2" @blur="validate">
                                        <option disabled selected value="">
                                            -- Choose One --
                                        </option>
                                        <option value="No">No content advisory needed</option>
                                        <option value="Yes">Yes, contains strong content</option>
                                    </select>

                                </div>
                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory2 === 'Yes'"
                                x-data="{contentAdvisoryOptions:['Gore','Graphic Violence','Provocative','Sex and Sexuality']}">
                                    <label>Types of Content Advisory</label>
                                    <template x-for="(type, i) in contentAdvisoryOptions">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'contentAdvisoryOptions2' + i" :id="'contentAdvisoryOptions2' + i" :value="type" @change="setCheckboxArray($el,'contentAdvisoryOptions2')">
                                            <label :for="'contentAdvisoryOptions2' + i" x-text="type"></label>
                                        </div>
                                    </template>
                                </div>
                                <div x-show="eventInfo.playerAge === '18+' && eventInfo.contentAdvisory2 === 'Yes'">
                                    <label for="triggerWarnings2">Potential trigger warnings</label>
                                    <input id="triggerWarnings2" name="triggerWarnings2" type="text" value="" x-model="eventInfo.triggerWarnings2" class="w-full max-w-md"/>
                                </div>
                            </fieldset>

                            {# Preferred Schedule #}
                            <fieldset :class="!isGameTwoComplete && 'fieldset-disabled'">
                                <legend>Scheduling</legend>
                                <div class="mb-base">
                                    <label for="schedulePref">Schedule Preferences</label>
                                    <template x-for="(time, i) in scheduleTimes">
                                        <div class="flex items-center">
                                            <input type="checkbox" :name="'time' + i" :id="'time' + i" :value="time" @change="setCheckboxArray($el,'schedulePref')">
                                            <label :for="'time' + i" x-text="time"></label>
                                        </div>
                                    </template>
                                </div>
                                <div class="required">
                                    <label for="shifts">I want to run these games for</label>
                                    <select id="shifts" name="shifts" x-model="eventInfo.shifts" @blur="validate" >
                                        <option disabled selected value="">-- Choose One --</option>
                                        <option>One 4 hour Games on Demand shift</option>
                                        <option>Two 4 hour shifts!</option>
                                        <option>Three shifts!</option>
                                        <option>Four shifts!</option>
                                        <option>Five shifts! Ah-hah-hah!</option>
                                    </select>
                                </div>
                                <div class="prose">
                                    <p class="italic">NOTE: If you want to run a different set of games for another shift please submit this form again.</p>
                                </div>
                            </fieldset>

                            <button type="submit" :disabled="!eventInfo.shifts">Submit</button>
                        </form>
                    </div>
                    {# END event submission div #}
                    {# event submitted #}
                    <div class="prose" x-show="eventSubmitted" id="event-submitted">
                        <h2>Thanks for submitting your games!</h2>
                        <p>Our staff will review your submissions, <span x-text="eventInfo.gameName1" class="italic font-bold"></span> and <span x-text="eventInfo.gameName2" class="italic font-bold"></span>, and let you know about scheduling it!</p>
                        <p>You can <a href="/games-on-demand">submit another event</a> now if you'd like.</p>
                    </div>
                </div>
                {# END runAnEventData component #}
            </section>
        </div>
    </main>
{% endblock %}

{% block pagebottom %}

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            // Check if variable is a string with stuff in it
            function isFull(str) {
                return (!!str && typeof str === 'string' && str.trim().length !== 0);
            }

            Alpine.data('runAnEventData', function () {
                return {
                    eventSubmitted: false,
                    eventInfo: {},
                    scheduleTimes: [
                        "Friday morning (between 9AM-1PM)",
                        "Friday afternoon (between 2PM-6PM)",
                        "Friday night (between 8PM-Midnight)",
                        "Saturday morning (between 9AM-1PM)",
                        "Saturday afternoon (between 2PM-6PM)",
                        "Saturday night (between 8PM-Midnight)",
                        "Sunday morning (between 9AM-1PM)",
                        "Sunday afternoon (between 2PM-6PM)"
                    ],
                    get isPersonalInfoComplete() {
                        const x = this.eventInfo
                        return [x.publicName, x.gmAge].every(isFull) && x.communityStandards;
                    },
                    get isGeneralInfoComplete() {
                        const x = this.eventInfo
                        return this.isPersonalInfoComplete && [x.gameLength, x.playerAge].every(isFull);
                    },
                    get isGameOneComplete() {
                        const x = this.eventInfo
                        return this.isGeneralInfoComplete && [
                            x.gameName1,
                            x.system1,
                            x.playtest1,
                            x.gameDescription1,
                            x.minPlayers1,
                            x.maxPlayers1
                        ].every(isFull) && (x.playerAge === '13+' || isFull(x.contentAdvisory1));
                    },
                    get isGameTwoComplete() {
                        const x = this.eventInfo
                        return this.isGameOneComplete && [
                            x.gameName2,
                            x.system2,
                            x.playtest2,
                            x.gameDescription2,
                            x.minPlayers2,
                            x.maxPlayers2
                        ].every(isFull) && (x.playerAge === '13+' || isFull(x.contentAdvisory2));
                    },
                    validate(event) {
                        const target = event.target;
                        const parent = target.parentNode;
                        // console.log("validate", event);
                        if (target.value === '') {
                            parent
                                .classList
                                .add('error-required');
                        } else {
                            parent
                                .classList
                                .remove('error-required');
                        }
                    },
                    async submitEvent() {
                        // check network status and data service before submitting
                        const status = await lilRed.status(20, 5000, 1.05);
                        if (!status) 
                            return false;
                        
                        console.log("submit", JSON.stringify(this.submittableEventInfo))
                        const y = 0

                        const submitNow = () => {
                            this.createEvent()
                            this.eventSubmitted = true
                        }

                        const scrollEventListener = () => {
                            if (window.pageYOffset === 0) {
                                submitNow();
                                window.removeEventListener('scroll', scrollEventListener)
                            }
                        }
                        function checkScrollEnd() {
                            window.addEventListener('scroll', scrollEventListener);
                        }
                        checkScrollEnd()
                        window.scroll({top: y, behavior: 'smooth'});
                    },
                    get submittableEventInfo() {

                        // Remove communityStandards before submitting
                        let {
                            communityStandards,
                            ...eventInfo
                        } = this.eventInfo

                        // Add Other to Safety Tools
                        let safetyTools = eventInfo.safetyTools || []
                        if (isFull(eventInfo.safetyToolsOther)) {
                            safetyTools = [
                                ...safetyTools,
                                eventInfo.safetyToolsOther
                            ]
                        }

                        // Make sure they are an array as undefined breaks .toString()
                        eventInfo.contentAdvisoryOptions1 = eventInfo.contentAdvisoryOptions1 || []
                        eventInfo.contentAdvisoryOptions2 = eventInfo.contentAdvisoryOptions2 || []
                        eventInfo.schedulePref = eventInfo.schedulePref || []

                        // change arrays to strings
                        eventInfo = {
                            ...eventInfo,
                            safetyTools: safetyTools.toString(),
                            contentAdvisoryOptions1: eventInfo
                                .contentAdvisoryOptions1
                                .toString(),
                            contentAdvisoryOptions2: eventInfo
                                .contentAdvisoryOptions2
                                .toString(),
                            schedulePref: eventInfo
                                .schedulePref
                                .toString()
                        }

                        return eventInfo
                    },
                    async createEvent() {

                        const eventInfo = this
                            .submittableEventInfo
                            console
                            .log("🚀 ~ file: run_games_on_demand.njk ~ line 368 ~ createEvent ~ eventInfo", eventInfo)

                        const options = {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8'
                            },
                            body: JSON.stringify(eventInfo)
                        }

                        const url = "/.netlify/functions/submit-games-on-demand"

                        try {
                            let response = await fetch(url, options)
                            console.log(`RESPONSE:fetch for ${url}`, response)
                            if (response.status !== 200) 
                                throw `fetch fail status: ${response.status}`
                            let result = await response.json()
                            console.log(`RESULT:fetch for ${url}`, result)
                            return result
                        } catch (err) {
                            console.error(`ERROR:fetch for ${url}`, err)
                            return false
                        }
                    },
                    setCheckboxArray(el, arrayName) {
                        this.eventInfo[arrayName] = this.eventInfo[arrayName] || [];
                        // if checked then add value to array; otherwise remove
                        if (el.checked) {
                            this.eventInfo[arrayName] = [
                                ...this.eventInfo[arrayName],
                                el.value
                            ]
                        } else {
                            this.eventInfo[arrayName] = this
                                .eventInfo[arrayName]
                                .filter(item => item !== el.value)
                        }
                        //console.log(this.eventInfo[arrayName])
                    },
                    addOther(val, arrayName) {}
                }
            })
        })
    </script>

{% endblock %}