{% extends 'layouts/base.njk' %}

{% block header %}
    {% include 'components/header.njk' %}
{% endblock %}

{% block content %}
    <main id="content">
        <div class="mx-auto max-w-content p-base">
            <h1 class="font-serif text-4xl font-bold leading-none md:text-5xl text-header mb-base">{{title}}</h1>
            <div class="prose">{{ content | safe }}</div>
            <section class="my-base">
                {# START Submit Form: only show if logged in #}
                <div x-cloak x-show="!isAuth" class="prose">
                    <p>You must be <button @click.stop="modal = 'login'" class="font-bold underline text-highlight">logged in</button> to submit a form.</p>
                </div>

                <div x-cloak x-show="isAuth && user" x-data="formData">
                    <div x-show="!formSubmitted" id="submit-form">
                        <header class="prose">
                            <h2>Dealer Signup</h2>
                            <p>
                                <span class="font-bold text-highlight">*</span>
                                <em>required field</em>
                            </p>
                        </header>
                        <form action="post" class="mt-base" id="form-dealer" @submit.prevent="submitForm">
                            {# TODO: add honeypot #}
                            <input type="hidden" x-model="formInfo.userDisplayName" x-init="formInfo.userDisplayName = user && user.displayName; $watch('user', value => formInfo.userDisplayName = value && value.displayName)">
                            <input type="hidden" x-model="formInfo.userId" x-init="formInfo.userId = user && user.id; $watch('user', value => formInfo.userId = value && value.id)">
                            <input type="hidden" x-model="formInfo.userEmail" x-init="formInfo.userEmail = user && user.userEmail; $watch('user', value => formInfo.userEmail = value && value.userEmail)">
                            {# Personal Info #}
                            <fieldset>
                                <legend>Company Info</legend>
                                <div class="required">
                                    <label for="companyName">Company Name</label>
                                    <input id="companyName" name="companyName" type="text" value="" x-model="formInfo.companyName" @blur="validate"/>
                                </div>
                                <div class="required" data-error="website required">
                                    <label for="website">Website</label>
                                    <input id="website" name="website" type="url" value="" x-model="formInfo.website" @blur="(e) => validate(e,{url: true})"/>
                                </div>
                                <div >
                                    <label for="twitter">Twitter</label>
                                    <input id="twitter" name="twitter" type="text" value="" x-model="formInfo.twitter" @blur="validate"/>
                                </div>
                                <div class="required">
                                    <label for="product">Product or service your company provides</label>
                                    <textarea cols="30" id="product" name="product" rows="3" x-model="formInfo.product" @blur="validate"></textarea>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Contact Person</legend>
                                <div class="required">
                                    <label for="contactName">Name</label>
                                    <input id="contactName" name="contactName" type="text" value="" x-model="formInfo.contactName" @blur="validate"/>
                                </div>
                                <div class="required" data-error="email address required">
                                    <label for="contactEmail">Email</label>
                                    <input id="contactEmail" name="contactEmail" type="email" value="" x-model="formInfo.contactEmail" @blur="(e) => validate(e,{email: true})"/>
                                </div>
                                <div class="required" data-error="phone number required">
                                    <label for="contactPhone">Phone</label>
                                    <input id="contactPhone" name="contactPhone" type="phone" value="" x-model="formInfo.contactPhone" @blur="(e) => validate(e,{phone: true})"/>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Community Standards Agreement</legend>
                                <div class="prose mb-sm">
                                    <p>Big Bad Con is committed to cultivating a culture of respect, support, and kindness at both our in-person and online events. We ask that all of our attendees agree to abide by our Community Standards, please take a moment to read them before answering yes below.</p>
                                    <p>
                                        <a href="/community-standards" class="icon-scroll">Community Standards</a>
                                    </p>
                                </div>
                                <div class="required">
                                    <input type="checkbox" id="agree-to-community-standards" name="agree-to-community-standards" value="Yes" x-model="formInfo.communityStandards" required>
                                    <label for="agree-to-community-standards" class="text-body-highlight"3324>
                                        Yes &mdash; I, <span x-text="user && user.displayName" class="font-bold"></span>, agree to the Big Bad Con Community Standards
                                    </label>
                                </div>
                            </fieldset>

                            <button type="submit" :disabled="!isFormComplete">Submit</button>
                        </form>
                    </div>
                    {# END form submission div #}
                    {# form submitted #}
                    <div class="prose" x-show="formSubmitted" id="form-submitted">
                        <h2>Thanks for submitting to be a dealer!</h2>
                        <p>Our staff will review your submission, and let you know about your application soon.</p>
                    </div>
                </div>

            </section>
        </div>
    </main>
{% endblock %}

{% block pagebottom %}

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            // Check if variable is a string with stuff in it or an array with stuff in it
            function isFull(val) {
                if (!!val && typeof val === 'string' && val.trim().length !== 0) 
                    return true;
                if (val && val.constructor === Array && val.length > 0) 
                    return true;
                return false;
            }

            const validateEmail = (txt) => {
                return String(txt)
                    .toLowerCase()
                    .match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
            };

            const validatePhone = (txt) => {
                return String(txt)
                    .toLowerCase()
                    .match(/^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/);
            };

            const validateUrl = (txt) => {
                return String(txt)
                    .toLowerCase()
                    .match(/^(https?:\/\/)?(www\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\.)+[\w]{2,}(\/\S*)?$/)
            }

            Alpine.data('formData', function () {
                return {
                    formSubmitted: false,
                    formInfo: {},
                    get isFormComplete() {
                        const x = this.formInfo
                        return x.communityStandards && [
                            x.companyName,
                            x.contactName,
                            x.contactEmail,
                            x.contactPhone,
                            x.website,
                            x.product
                        ].every(isFull);
                    },
                    validate(event, options) {
                        options = {
                            required: true,
                            email: false,
                            phone: false,
                            ...options
                        }
                        const target = event.target;
                        const value = target.value;
                        const parent = target.parentNode;

                        let valid = true;

                        if (options.required && !isFull(value)) 
                            valid = false;
                        if (options.email && !validateEmail(value)) 
                            valid = false;
                        if (options.phone && !validatePhone(value)) 
                            valid = false;
                        if (options.url && !validateUrl(value)) 
                            valid = false;
                        
                        if (!valid) {
                            parent
                                .classList
                                .add('error-required');
                        } else {
                            parent
                                .classList
                                .remove('error-required');
                        }
                    },
                    submitForm() {
                        console.log("submitForm", this.formInfo)
                        const y = 0

                        const submitNow = () => {
                            this.postFormInfo()
                            this.formSubmitted = true
                        }

                        const scrollEventListener = () => {
                            if (window.pageYOffset === 0) {
                                submitNow();
                                window.removeEventListener('scroll', scrollEventListener)
                            }
                        }
                        function checkScrollEnd() {
                            window.addEventListener('scroll', scrollEventListener);
                        }
                        checkScrollEnd()
                        window.scroll({top: y, behavior: 'smooth'});
                    },
                    async postFormInfo() {

                        console.log('postFormInfo')

                        // Remove communityStandards before submitting
                        let {
                            communityStandards,
                            ...formInfo
                        } = this.formInfo
                        // change arrays to strings

                        // Convert any array to string and make empty string for anything else not a string
                        Object
                            .keys(formInfo)
                            .forEach(key => {
                                if (formInfo[key] && formInfo[key].constructor === Array) {
                                    formInfo[key] = formInfo[key].toString();
                                } else if (!formInfo[key] || typeof formInfo[key] !== 'string') {
                                    formInfo[key] = ''
                                }
                            })

                        const options = {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8'
                            },
                            body: JSON.stringify(formInfo)
                        }

                        console.log('formInfo JOSN string', JSON.stringify(formInfo));

                        const url = "/.netlify/functions/submit-dealer-application"

                        try {
                            let response = await fetch(url, options)
                            console.log(`RESPONSE:fetch for ${url}`, response)
                            if (response.status !== 200) 
                                throw `fetch fail status: ${response.status}`
                            let result = await response.json()
                            console.log(`RESULT:fetch for ${url}`, result)
                            return result
                        } catch (err) {
                            console.error(`ERROR:fetch for ${url}`, err)
                            return false
                        }
                    },
                    setCheckboxArray(el, arrayName) {
                        this.formInfo[arrayName] = this.formInfo[arrayName] || [];
                        // if checked then add value to array; otherwise remove
                        if (el.checked) {
                            this.formInfo[arrayName] = [
                                ...this.formInfo[arrayName],
                                el.value
                            ]
                        } else {
                            this.formInfo[arrayName] = this
                                .formInfo[arrayName]
                                .filter(item => item !== el.value)
                        }
                    }
                }
            })
        })
    </script>

{% endblock %}