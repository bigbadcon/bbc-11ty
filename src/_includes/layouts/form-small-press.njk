{% extends 'layouts/base.njk' %}

{% block header %}
    {% include 'components/header.njk' %}
{% endblock %}

{% block content %}
    <main id="content">
        <div class="mx-auto max-w-content p-base">
            <h1 class="font-serif text-4xl font-bold leading-none md:text-5xl text-header mb-base">{{title}}</h1>
            <div class="prose">{{ content | safe }}</div>
            <section class="my-base">
                {# START Submit Form: only show if logged in #}
                <div x-cloak x-show="!isAuth" class="prose">
                    <p>You must be <button @click.stop="modal = 'Login'" class="font-bold underline text-highlight">logged in</button> and have a badge to submit a form.</p>
                </div>
                <div x-cloak x-show="isAuth && !hasBadge" class="prose">
                    <p>Hello <b x-text="user.displayName"></b> you must be have a badge to submit the Small Press signup form.</p>
                </div>
                <div class="prose" x-cloak x-show="isAuth && hasBadge" x-transition>
                    <p>Welcome <b x-text="user && user.displayName"></b>
                You have a <span class="inline-flex items-center gap-2xs">
                            <template x-for="role in badgeRoles">
                                <span x-text="(role === 'paidattendee') ? 'paid' : role" class="py-[.1rem] text-xs font-bold uppercase rounded-full bg-hr text-primary px-xs"></span>
                            </template>
                        </span>
                badge! You are welcome to fill out the Small Press Showcase Signup form below.
                    </p>
                </div>

                <div x-cloak x-show="isAuth && hasBadge" x-data="formData" class="my-base">
                    <div x-show="!formSubmitted" id="submit-form">
                        <header class="prose">
                            <h2>Small Press Showcase Signup</h2>
                            <p>
                                <span class="font-bold text-highlight">*</span>
                                <em>required field</em>
                            </p>
                        </header>
                        <form class="mt-base" id="form-small-press" @submit.prevent="submitForm" x-validate x-data="{userDisplayName:user && user.displayName, userId: user && user.id, userEmail: user.userEmail}">
                            {# TODO: add honeypot #}
                            {# x-init required to add value after the fact for these hidden fields #}
                            <input type="hidden" name="userDisplayName" :value="user && user.displayName" x-validate>
                            <input type="hidden" name="userId" :value="user && user.id" x-validate>
                            <input type="hidden" name="userEmail" :value="user.userEmail" x-validate>
                            {# Personal Info #}
                            <fieldset>
                                <legend>Company Info</legend>
                                <div class="required">
                                    <label for="business">Business Name</label>
                                    <input id="business" name="business" type="text" value="" required/>
                                </div>
                                <div class="required">
                                    <label for="website">Website</label>
                                    <input id="website" name="website" type="text" value="" x-validate.required.website/>
                                </div>
                                <div >
                                    <label for="twitter">Twitter</label>
                                    <input id="twitter" name="twitter" type="text" value=""/>
                                </div>
                                <div class="required">
                                    <label for="contact-phone">Phone</label>
                                    <input id="contact-phone" name="contact-phone" type="tel" value="" required/>
                                </div>
                                <div class="required">
                                    <label for="product">Product or service you provide</label>
                                    <textarea cols="30" id="product" name="product" rows="3" required></textarea>
                                </div>
                                <div>
                                    <label for="other">Anything else we should know</label>
                                    <textarea cols="30" id="other" name="other" rows="3"></textarea>
                                </div>
                                <div class="required">
                                    <input type="checkbox" id="age18" name="age18" value="Yes" required>
                                    <label for="age18" class="text-body-highlight"3324>
                                        Yes &mdash; I, <span x-text="user && user.displayName" class="font-bold"></span>, am 18 or older
                                    </label>
                                    <span class="error-msg"></span>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Community Standards Agreement</legend>
                                <div class="prose mb-sm">
                                    <p>Big Bad Con is committed to cultivating a culture of respect, support, and kindness at both our in-person and online events. We ask that all of our attendees agree to abide by our Community Standards, please take a moment to read them before answering yes below.</p>
                                    <p>
                                        <a href="/community-standards" class="icon-scroll">Community Standards</a>
                                    </p>
                                </div>
                                <div class="required">
                                    <input type="checkbox" id="agree-to-community-standards" name="agree-to-community-standards" value="Yes" required>
                                    <label for="agree-to-community-standards" class="text-body-highlight"3324>
                                        Yes &mdash; I, <span x-text="user && user.displayName" class="font-bold"></span>, agree to the Big Bad Con Community Standards
                                    </label>
                                    <span class="error-msg"></span>
                                </div>
                            </fieldset>

                            <button type="submit" :disabled="!$validate.isComplete('form-small-press')" class="btn btn-primary">Submit</button>
                        </form>
                        {% if (sitemeta.environment === 'dev') %}
                            {% import 'components/x-validate-form-validator.njk' as validate %}
                            {{ validate.log('form-small-press') }}
                        {% endif %}
                    </div>
                    {# END form submission div #}
                    {# form submitted #}
                    <div class="prose" x-show="formSubmitted" id="form-submitted">
                        <h2>Thanks for submitting for as a small press vendor!</h2>
                        <p>Our staff will review your submission, and contact you about being part of our small press showcase!</p>
                    </div>
                </div>

            </section>
        </div>
    </main>
{% endblock %}

{% block pagebottom %}

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            Alpine.data('formData', function () {
                return {
                    formSubmitted: false,
                    formInfo: {},
                    async submitForm(e) {
                        // Check network status and data service status
                        const status = await lilRed.status(20, 5000, 1.05);
                        if (!status) 
                            return false;
                        
                        let formData = {}

                        // Create formData object from $validate.data with simple name/value pairs
                        this
                            .$validate
                            .data(e.target)
                            .forEach(field => formData[field.name] = field.value)

                        const submitNow = () => {
                            this.postFormInfo(formData)
                            this.formSubmitted = true
                        }

                        const scrollEventListener = () => {
                            if (window.pageYOffset === 0) {
                                submitNow();
                                window.removeEventListener('scroll', scrollEventListener)
                            }
                        }
                        function checkScrollEnd() {
                            window.addEventListener('scroll', scrollEventListener);
                        }
                        checkScrollEnd()
                        window.scroll({top: 0, behavior: 'smooth'});
                    },
                    async postFormInfo(data) {
                        console.log('postFormInfo', data)

                        const options = {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8'
                            },
                            body: JSON.stringify(data)
                        }

                        const url = "/.netlify/functions/submit-small-press-application"

                        try {
                            let response = await fetch(url, options)
                            console.log(`RESPONSE:fetch for ${url}`, response)
                            if (response.status !== 200) 
                                throw `fetch fail status: ${response.status}`
                            let result = await response.json()
                            console.log(`RESULT:fetch for ${url}`, result)
                            return result
                        } catch (err) {
                            console.error(`ERROR:fetch for ${url}`, err)
                            return false
                        }

                    }
                }
            })
        })
    </script>

{% endblock %}