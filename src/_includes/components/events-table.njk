<section class="mt-md" x-data="eventsTable">
    <h2 class="font-serif text-3xl font-bold leading-none md:text-4xl text-header mb-2xs">Events List</h2>
    {% include 'components/event-table-filter.njk' %}
    <table class="events-table" id="events-table">
        <caption class="italic text-left mb-xs">Table can be sorted by event, system, or date</caption>
        <thead :class="sortAscending ? 'ascending' : 'descending'">
            <tr>
                <th>
                    <div class="sortable" :class="sortBy === 1 && 'active'">
                        <button @click="sortTable(1)" class="sort-btn" title="Sort by event">Event</button>
                    </div>
                </th>
                <th>
                    <div class="sortable" :class="sortBy === 2 && 'active'">
                        <button @click="sortTable(2)" class="sort-btn" title="Sort by system">System</button>
                    </div>
                </th>
                <th>
                    <div class="sortable" :class="sortBy === 3 && 'active'">
                        <button @click="sortTable(3)" class="sort-btn" title="Sort by Date/Time">Date/Time</button>
                    </div>
                </th>
                <th class="events-table-header--categories">Categories</th>
                <th class="events-table-header--spaces">Spaces</th>
                <th class="events-table-header--fav" x-cloak x-show="isAuth">
                    <div class="flex justify-end">
                        <span class="cursor-pointer fav-star-header hover:bg-highlight" @click="filter.favsOnly = !filter.favsOnly" :class="filter.favsOnly && 'favved'"></span>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            {% for event in eventData.events %}
                {# isFav is in Alpine.data("global") #}
                {# build event catagories array for filter button #}
                {% set spacesOpen = "'Any'" %}
                {% if event.metadata.Players > 0 %}
                    {% set spacesOpen = event.metadata.Players %}
                {% endif %}
                {# spacesOpen defaults to number of players #}
                <tr 
                x-data="eventInfo"
                x-init="spacesOpen = {{ spacesOpen }}; id = {{event.eventId}}; categories = [{{event.categories | alpineArray}}]; if (isAuth) getEventInfo({{event.eventId}}); $watch('isAuth', val => {if (val) getEventInfo({{event.eventId}})})"
                x-show="(typeof filter.category !== 'string' || filter.category === 'all' || categories.some(cat => cat.toLowerCase() === filter.category)) && (!filter.favsOnly || isFav({{event.eventId}})) && (!filter.openOnly || isSpacesOpen)" >

                    {# Event Name #}
                    <td class="events-table-cell--name">
                        <h3>
                            {% if (sitemeta.context === "dev" and event.eventStatus !== 1) %}
                                {% if event.eventStatus === 0 %}
                                    <b>PENDING:</b>
                                {% else %}
                                    <b>UNPUBLISHED ({{event.eventStatus}}):</b>
                                {% endif %}
                            {% endif %}
                            <a href="/events/{{event.eventSlug}}" class="font-bold transition-colors text-header hover:text-highlight">{{event.eventName | safe }}</a>
                        </h3>
                        <p>{{event.metadata.GM | safe}}</p>
                    </td>

                    {# System #}
                    <td class="events-table-cell--system">{{event.metadata.System}}</td>
                    {# Event Start Date/Time #}
                    {# formatEventDate() is in scripts.js and returns html with date and time in seperate span tags #}
                    {# formatEventDate filter is in eleventy.js and returns html with date and time in seperate span tags #}
                    {# <td class="flex flex-col py-sm gap-x-2xs" x-cloak x-show="timezone" x-html="formatEventDate('{{event.eventStartDateTime}}', timezone)">{{ event.eventStartDateTime | formatEventDate | safe }}</td> #}
                    <td class="events-table-cell--date">
                        <div class="sm:flex sm:flex-col">
                            {% include 'components/event-date-time-duration.njk' %}
                        </div>
                    </td>

                    {# Event Categories #}
                    <td class="events-table-cell--categories">
                        <div class="flex flex-wrap justify-start gap-2xs">
                            {% for category in event.categories %}
                                <span class="text-xs rounded-full px-xs py-[.1rem] bg-card whitespace-nowrap">{{category | replace('Game', '') | trim}}</span>
                            {% endfor %}
                        </div>
                    </td>
                    {# Spaces #}
                    <td class="events-table-cell--spaces">
                        {# If booked add check mark, otherwise list number of spaces open #}
                        {% if (event.metadata.Players > 0) %}
                            <div class="flex items-center justify-center py-sm">
                                <span 
                                class="block text-center border-2 rounded border-body h-[1.45rem] w-[2.2rem]" 
                                :class="spacesOpen === 0 && 'bg-card opacity-40'" 
                                x-text="(isBooked({{event.eventId}})) ? '&#10004;' : (typeof spacesOpen === 'number') ? spacesOpen : '{{event.metadata.Players}}'">{{ event.metadata.Players }}</span>
                            </div>
                        {% else %}
                            Any
                        {% endif %}
                    </td>
                    {# Fav Event Icon #}
                    <td class="events-table-cell--fav" x-cloak x-show="isAuth">
                        <div class="flex justify-end">
                            <span @click="toggleFav({{event.eventId}})" class="fav-star" :class="isFav({{event.eventId}}) && 'favved'"></span>
                        </div>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</section>
<script type="text/javascript">

    document.addEventListener('alpine:init', () => {
        function compareValues(a, b) {
            // return -1/0/1 based on what you "know" a and b
            // are here. Numbers, text, some custom case-insensitive
            // and natural number ordering, etc. That's up to you.
            // A typical "do whatever JS would do" is:
            return (a < b)
                ? -1
                : (a > b)
                    ? 1
                    : 0;
        }

        Alpine.data('eventsTable', function () {
            return {
                init() {
                    if (this.sortAscending === undefined) {
                        this.sortAscending = true
                    }
                    this.sortTable(this.sortBy || 1, this.sortAscending)
                    this.searchUrlParams()
                },
                filter: this.$persist({favsOnly: false, openOnly: false, category: 'All'}),
                sortBy: this.$persist(1),
                sortAscending: this.$persist(true),
                allCategories: [
                    'all',
                    'rpg',
                    'board/card game',
                    'playtest',
                    'panel',
                    'workshop',
                    'god',
                    'all ages',
                    'early signup',
                    'vending'
                ],
                sortTable(colnum, direction) {
                    // If this is the same column than switch direction
                    if (direction === undefined) {
                        if (this.sortBy === colnum) {
                            this.sortAscending = !this.sortAscending
                        } else {
                            this.sortAscending = true
                            this.sortBy = colnum
                        }
                    } else {
                        this.sortAscending = direction
                        this.sortBy = colnum
                    }

                    const table = document.querySelector('#events-table tbody');
                    let rows = Array.from(table.querySelectorAll(`tr`));

                    let qs = colnum === 1
                        ? `td:nth-child(${colnum}) h3`
                        : `td:nth-child(${colnum})`;
                    rows.sort((r1, r2) => {
                        // get each row's relevant column
                        let t1 = r1.querySelector(qs);
                        let t2 = r2.querySelector(qs);

                        // and then effect sorting by comparing their content:
                        if (this.sortAscending) {
                            return compareValues(t1.textContent, t2.textContent);
                        } else {
                            return compareValues(t2.textContent, t1.textContent);
                        }
                    });

                    // and then the magic part that makes the sorting appear on-page:
                    rows.forEach(row => table.appendChild(row));
                },
                searchUrlParams() {
                    if (location.search) {
                        const params = new URLSearchParams(location.search);
                        let cat = params.get('cat')
                        cat = cat.replace("-", " ")
                        if (cat && this.allCategories.includes(cat)) {
                            this.filter.category = cat
                        }
                    }
                }
            }
        })
    })
</script>