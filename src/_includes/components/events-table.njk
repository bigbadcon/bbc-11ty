<section class="mt-md" x-data="eventsTable">
    <h2 class="font-serif text-3xl font-bold leading-none md:text-4xl text-header mb-2xs">Events List</h2>
    {% include 'components/event-table-filter.njk' %}
    {# Testing: <button @click="getFavEvents">load favs</button> #}
    {# TODO: add filter by catagory and sort by name, system, gm, date #}

    <table class="events-table" id="events-table">
        <caption class="italic text-left mb-xs">Table can be sorted by event or system</caption>
        <thead :class="sortAscending ? 'ascending' : 'descending'">
            <tr>
                <th class="text-left sortable" :class="sortBy === 1 && 'active'">
                    <button @click="sortTable(1)" class="sort-btn" >Event</button>
                </th>
                <th class="text-left sortable" :class="sortBy === 2 && 'active'">
                    <button @click="sortTable(2)" class="sort-btn" >System</button>
                </th>
                {# <th class="text-left ">Date Time</th>
                <th class="text-center max-w-max">Dur</th> #}
                <th class="hidden text-left sm:table-cell">Categories</th>
                {# <th class="w-8 text-center">
                    <span class="flex items-center justify-end pl-xs">{% icon 'square-check', 'fill-body' %}</span>
                </th> #}
                <th class="hidden w-8 text-center sm:table-cell" x-cloak x-show="isAuth">
                    <button @click="filter.favsOnly = !filter.favsOnly">
                        <svg class="w-6 h-6 group-hover:fill-highlight" :class="(filter.favsOnly) ? 'fill-highlight' : 'fill-body'">
                            <use xlink:href="/static/images/icons.svg#star"></use>
                        </svg>
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            {% for event in eventData.events %}
                {# isFav is in Alpine.data("global") #}
                {# build event catagories array for filter button #}
                <tr 
                x-data="{category: [{{event.categoriesAlpineArray}}]}"
                x-show="(filter.category === 'All' || category.includes(filter.category)) && (!filter.favsOnly || isFav({{event.eventId}}))" >

                    {# Event Name #}
                    <td>
                        <h3>
                            <a href="/events/{{event.eventSlug}}" class="font-bold transition-colors text-header hover:text-highlight">{{event.eventName | safe }}</a>
                        </h3>
                        <p>{{event.metadata.GM | safe}}</p>
                    </td>
                    {# Event Start Date/Time #}
                    {# formatEventDate() is in scripts.js and returns html with date and time in seperate span tags #}
                    {# formatEventDate filter is in eleventy.js and returns html with date and time in seperate span tags #}
                    {# <td class="flex flex-col py-sm gap-x-2xs" x-cloak x-show="timezone" x-html="formatEventDate('{{event.eventStartDateTime}}', timezone)">{{ event.eventStartDateTime | formatEventDate | safe }}</td> #}
                    {# Event Duration #}
                    {# <td class="font-bold text-center align-top py-sm px-xs">
                        {% eventDuration event.eventStartDateTime,
                        event.eventEndDateTime %}
                    </td> #}
                    {# System #}
                    <td class="italic">{{event.metadata.System}}</td>
                    {# Event Categories #}
                    <td>
                        <div class="flex flex-wrap mt-2xs sm:mt-0 gap-2xs">
                            {% for category in event.categories %}
                                <span class="text-xs rounded-full px-xs py-[.15rem] bg-card whitespace-nowrap">{{category.name | replace('Game', '') | trim}}</span>
                            {% endfor %}
                        </div>
                    </td>
                    {# Fav Event Icon #}
                    <td x-cloak x-show="isAuth" class="table-cell-fav-star">
                        {# TODO: refactor toggleFav and isFav #}
                        <span @click="toggleFav({{event.eventId}})" class="fav-star" :class="isFav({{event.eventId}}) && 'favved'">{% icon 'star', 'fill-body' %}</span>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</section>
<script type="text/javascript">

    document.addEventListener('alpine:init', () => {
        function compareValues(a, b) {
            // return -1/0/1 based on what you "know" a and b
            // are here. Numbers, text, some custom case-insensitive
            // and natural number ordering, etc. That's up to you.
            // A typical "do whatever JS would do" is:
            return (a < b)
                ? -1
                : (a > b)
                    ? 1
                    : 0;
        }

        Alpine.data('eventsTable', function () {
            return {
                init() {
                    this.sortTable(this.sortBy, this.sortAscending)
                },
                filter: this.$persist({favsOnly: false, openOnly: false, category: 'All'}),
                sortBy: this.$persist(1),
                sortAscending: this.$persist(true),
                sortTable(colnum, direction) {
                    // If this is the same column than switch direction
                    if (direction === undefined) {
                        if (this.sortBy === colnum) {
                            this.sortAscending = !this.sortAscending
                        } else {
                            this.sortAscending = true
                            this.sortBy = colnum
                        }
                    } else {
                        this.sortAscending = direction
                        this.sortBy = colnum
                    }

                    const table = document.querySelector('#events-table tbody');
                    let rows = Array.from(table.querySelectorAll(`tr`));

                    let qs = colnum === 1
                        ? `td:nth-child(${colnum}) h3`
                        : `td:nth-child(${colnum})`;
                    rows.sort((r1, r2) => {
                        // get each row's relevant column
                        let t1 = r1.querySelector(qs);
                        let t2 = r2.querySelector(qs);

                        // and then effect sorting by comparing their content:
                        if (this.sortAscending) {
                            return compareValues(t1.textContent, t2.textContent);
                        } else {
                            return compareValues(t2.textContent, t1.textContent);
                        }
                    });

                    // and then the magic part that makes the sorting appear on-page:
                    rows.forEach(row => table.appendChild(row));
                }
            }
        })
    })
</script>