{# x-data="eventInfo" on event page #}
{# Only show if event has yet to happen #}
{% if not event.eventStartDateTime | isAfterDate %}
    {# Show need for login  #}
    <div x-cloak x-show="!isAuth" class="prose rounded-md mt-base bg-card pt-sm pb-base px-base">
        <p>You must be <button @click.stop="modal = 'Login'" class="font-bold underline text-highlight">logged in</button> and have a badge to host Office Hours</p>
    </div>

    <div x-cloak x-show="isAuth && isTeen" class="prose rounded-md mt-base bg-card pt-sm pb-base px-base">
        <p>You must be 18 or older to to host Office Hours.</p>
    </div>

    <div x-cloak x-data="officeHoursForm" x-show="isAuth && !isTeen && !isOfficeHours" class="prose rounded-md mt-base bg-card pt-sm pb-base px-base" x-init="if (isAuth) { getUserData(); getBookedEvents()}">
        <h2>Office Hours Signup</h2>

        {# Show need for badge to those logged in #}
        <div x-cloak x-show="!hasBadge" class="prose">
            <p>Hello <b x-text="user && user.displayName"></b> you must be have a badge to submit the signup form.</p>
        </div>
        {# Shwo for those that have a badge #}
        <div x-cloak x-show="hasBadge" x-transition>
            <p>Welcome <b x-text="user && user.displayName"></b>
    You have a <span class="inline-flex items-center gap-2xs">
                    <template x-for="role in badgeRoles">
                        <span x-text="(role === 'paidattendee') ? 'paid' : role" class="py-[.1rem] text-xs font-bold uppercase rounded-full bg-hr text-header-bg px-xs"></span>
                    </template>
                </span>
    badge! Before you can book into this event, you must sign up for the Office Hours role.
        </p>
            <form class="grid mt-base gap-base" id="form-office-hours" @submit.prevent="submitForm" x-validate>
                {# TODO: add honeypot #}
                {# x-init required to add value after the fact for these hidden fields #}
                <input type="hidden" name="userDisplayName" :value="user && user.displayName" x-validate>
                <input type="hidden" name="userId" :value="user && user.id" x-validate>
                <input type="hidden" name="userEmail" :value="user && user.userEmail" x-validate>
                <input type="hidden" name="eventId" value="{{event.eventId}}" x-validate>
                {# Personal Info #}
                <fieldset class="grid gap-base">
                    <legend>Name/Company Info</legend>
                    <div class="required">
                        <label for="officeHoursName">Name</label>
                        <p class="directions">Your name or the company you represent</p>
                        <input id="officeHoursName" name="officeHoursName" type="text" value="" required/>
                    </div>
                    <div class="required">
                        <label for="website">Website</label>
                        <p class="directions">Please use Full url with https</p>
                        <input id="website" name="website" type="url" value="" required data-error-msg="website url required"/>
                    </div>
                    <div >
                        <label for="contactEmail">Contact Email</label>
                        <p class="directions">This email will be publically listed</p>
                        <input id="contactEmail" name="contactEmail" type="email" value="" required/>
                    </div>
                    <div class="required">
                        <label for="offering">What do you hope to offer during office hours?</label>
                        <p class="directions">advice, mentoring, job opportunities, etc.</p>
                        <textarea cols="30" id="offering" name="offering" rows="3" required></textarea>
                    </div>
                </fieldset>
                <fieldset>
                    <legend>Community Standards Agreement</legend>
                    <div class="prose mb-sm">
                        <p>Big Bad Con is committed to cultivating a culture of respect, support, and kindness at both our in-person and online events. We ask that all of our attendees agree to abide by our Community Standards, please take a moment to read them before answering yes below.</p>
                        <p>
                            <a href="/community-standards" class="icon-scroll">Community Standards</a>
                        </p>
                    </div>
                    <div class="flex required gap-xs">
                        <input type="checkbox" id="agree-to-community-standards" name="agree-to-community-standards" value="Yes" required>
                        <label for="agree-to-community-standards" >
                                        Yes &mdash; I, <span x-text="user && user.displayName" class="font-bold"></span>, agree to Big Bad Con Community Standards
                                    </label>
                        <span class="error-msg"></span>
                    </div>
                </fieldset>

                <div>
                    <button type="submit" :disabled="!$validate.isComplete('form-office-hours')" class="btn btn-header-bg" x-show="!submitClicked">Submit</button>
                </div>
                <div x-show="submitClicked" class="inline-flex items-center italic font-bold gap-sm">
                    <svg class="w-5 h-5 text-body animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Submitting formâ€¦</span>
                </div>
                {% if (sitemeta.environment === 'dev') %}
                    {% import 'components/x-validate-form-validator.njk' as validate %}
                    {{ validate.log('form-office-hours') }}
                {% endif %}
            </form>
        </div>
    </div>

    {# Only show booking if has role 'vendor'; reload getBooked Events as we need to check if this is booked via the form #}
    <div x-cloak x-show="isAuth && isOfficeHours">
        <div class="prose rounded-md my-base bg-card py-base px-base">
            <p>Welcome <b x-text="user && user.displayName"></b> you are registered to host Office Hours!</p>
        </div>
        {% include 'components/event-booking-panel.njk' %}
    </div>

    <script type="text/javascript">

        document.addEventListener('alpine:init', () => {

            Alpine.data('officeHoursForm', function () {
                return {
                    submitClicked: false,
                    async submitForm(e) {
                        // Check network status and data service status
                        const status = await lilRed.status(20, 5000, 1.05);
                        if (!status) 
                            return false;
                        
                        this.submitClicked = true;
                        const data = this
                            .$validate
                            .value(e.target)
                        console.log("ðŸš€ ~ file: office-hours-booking-panel.njk ~ line 144 ~ submitForm ~ data", data)

                        this.postFormInfo(data)
                    },
                    async postFormInfo(data) {
                        console.log('postFormInfo', data)

                        const options = {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8'
                            },
                            body: JSON.stringify(data)
                        }

                        const url = "/.netlify/functions/submit-office-hours-application"

                        try {
                            let response = await fetch(url, options)
                            console.log(`RESPONSE:fetch for ${url}`, response)
                            if (response.status !== 200) 
                                throw `fetch fail status: ${response.status}`
                                //reload the page
                            location.reload()
                            return result
                        } catch (err) {
                            console.error(`ERROR:fetch for ${url}`, err)
                            this.submitClicked = true;
                            this.$dispatch('toast', 'ERROR: Office Hours signup submission failed. Try again and contact us if you still are having issues.')
                            return false
                        }

                    }
                }
            })
        })
    </script>
{% endif %}