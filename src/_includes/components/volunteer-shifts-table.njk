<section class="mt-md" x-data="eventsTable">
    <h2 class="font-serif text-3xl font-bold leading-none md:text-4xl text-header mb-base">Volunteer Shift List</h2>

    {# Volunteer Filter Buttons #}
    <div class="flex flex-wrap items-center justify-start border-t-2 border-b-2 mb-base text-body gap-sm py-sm border-hr" >
        <div class="flex items-center justify-start gap-xs">
            <h5 class="text-sm font-bold">Date:</h5>
            <select class="mb-0 text-sm cursor-pointer pl-xs py-2xs" x-model="filter.day" >
                <option value="all">All</option>
                <option>Oct 27</option>
                <option>Oct 28</option>
                <option>Oct 29</option>
                <option>Oct 30</option>
            </select>
        </div>
        <div class="flex items-center justify-start gap-xs"
        x-init="if (!isAuth) resetUserFilters(); $watch('isAuth', val => { if (!val) resetUserFilters() })">
            {# favsOnly data is in x-data="eventFilter" in wrapping div in base.njk #}
            <h5 class="text-sm font-bold">Filter:</h5>
            <button @click="filter.openOnly = !filter.openOnly" class="filter-btn" :class="filter.openOnly && 'active'">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 28">
                    <title>square</title>
                    <path d="M24 6.5v15c0 2.484-2.016 4.5-4.5 4.5h-15c-2.484 0-4.5-2.016-4.5-4.5v-15c0-2.484 2.016-4.5 4.5-4.5h15c2.484 0 4.5 2.016 4.5 4.5z"></path>
                </svg>
                <span class="text-sm">Open Spaces</span>
            </button>
            <button @click="filter.favsOnly = !filter.favsOnly" class="filter-btn" :class="filter.favsOnly && 'active'" x-cloak x-show="isAuth">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
                    <title>star</title>
                    <path d="M32 12.408l-11.056-1.607-4.944-10.018-4.944 10.018-11.056 1.607 8 7.798-1.889 11.011 9.889-5.199 9.889 5.199-1.889-11.011 8-7.798z"></path>
                </svg>
                <span class="text-sm">Favs</span>
            </button>
            <button @click="filter.overlap = !filter.overlap" class="filter-btn" :class="filter.overlap && 'active'" x-cloak x-show="isAuth">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
                    <path d="M28 4v26h-21c-1.657 0-3-1.343-3-3s1.343-3 3-3h19v-24h-20c-2.2 0-4 1.8-4 4v24c0 2.2 1.8 4 4 4h24v-28h-2z"></path>
                    <path d="M7.002 26v0c-0.001 0-0.001 0-0.002 0-0.552 0-1 0.448-1 1s0.448 1 1 1c0.001 0 0.001-0 0.002-0v0h18.997v-2h-18.997z"></path>
                </svg>
                <span class="text-sm">Hide My Events Conflicts</span>
            </button>
        </div>
        <div x-show="!isFilterDefault" x-transition>
            <button @click="resetFilters" class="filter-btn">
                <span class="text-sm">Reset Filters</span>
            </button>
        </div>
    </div>

    {# Volunteer Events Table #}
    <table class="events-table volunteer-shifts-table" id="events-table">
        <thead :class="sortAscending ? 'ascending' : 'descending'">
            <tr>
                <th>
                    <div class="sortable" :class="sortBy === 1 && 'active'">
                        <button @click="sortTable(1)" class="sort-btn" title="Sort by event">Event</button>
                    </div>
                </th>
                <th>
                    <div class="sortable" :class="sortBy === 2 && 'active'">
                        <button @click="sortTable(2)" class="sort-btn" title="Sort by Date/Time">Date/Time</button>
                    </div>
                </th>
                {% if sitemeta.context === 'dev' %}
                    <th class="!text-center">
                        <span class="border-2 border-header px-xs py-2xs">ID</span>
                    </th>
                {% endif %}
                <th class="events-table-header--spaces">Spaces</th>
                <th class="events-table-header--fav" x-cloak x-show="isAuth">
                    <div class="flex justify-end">
                        <span class="cursor-pointer fav-star-header hover:bg-highlight" @click="filter.favsOnly = !filter.favsOnly" :class="filter.favsOnly && 'favved'"></span>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>

            {# Volunteer Event Row #}
            {% for event in eventData.volunteer %}
                {# isFav is in Alpine.data("global") #}
                <tr 
                x-data="eventInfo"
                x-init="id = {{event.eventId}}; bookingOverlap = doesEventOverlap('{{event.eventStartDateTime}}', {{event.eventDuration}}); $watch('bookedEvents', val => { if (bookedEvents) doesEventOverlap('{{event.eventStartDateTime}}', {{event.eventDuration}}) })"
                x-show="(!filter.favsOnly || isFav({{event.eventId}})) && (!filter.openOnly || spaces[{{event.eventId}}] > 0) && (filter.day === 'all' || $refs.date{{event.eventId}}.textContent === filter.day) && (!filter.overlap || !bookingOverlap)" 
                >
                    {# Event Name #}
                    <td class="events-table-cell--name">
                        <h3>
                            <a href="/volunteer/{{event.eventSlug}}" class="font-bold transition-colors text-header hover:text-highlight">{{event.eventName | safe }}</a>
                        </h3>
                    </td>
                    {# Event Start Date/Time #}
                    {# formatEventDate() is in scripts.js and returns html with date and time in seperate span tags #}
                    {# formatEventDate filter is in eleventy.js and returns html with date and time in seperate span tags #}
                    <td class="events-table-cell--date" data-sort="{{ event.eventStartDateTime | unixtime }}">
                        {% if (event.eventDuration > 0) %}
                            <span class="whitespace-nowrap" x-ref="date{{event.eventId}}">{{ event.eventStartDateTime | formatDate }}</span>
                            <span class="whitespace-nowrap">{{ event.eventStartDateTime | formatTime }}
                                <b class="whitespace-nowrap">{{ event.eventDuration }}hr</b>
                            </span>
                        {% else %}
                            <span class="opacity-50">TBD</span>
                        {% endif %}
                    </td>
                    {% if sitemeta.context === 'dev' %}
                        <td class="text-center">
                            <span class="text-xs border-2 border-header px-xs py-2xs">{{event.eventId}}</span>
                        </td>
                    {% endif %}
                    {# Spaces #}
                    <td class="events-table-cell--spaces">
                        {# If booked add check mark, otherwise list number of spaces open #}
                        {% if (event.metadata.Players > 0) %}
                            <div class="flex items-center justify-center py-sm">
                                <span 
                                class="block text-center border-2 rounded border-body h-[1.45rem] w-[2.2rem]" 
                                :class="spaces[{{event.eventId}}] <= 0 && 'bg-card opacity-40'"
                                x-text="(isBooked({{event.eventId}})) ? '&#10004;' : (typeof spaces['{{event.eventId}}'] === 'number') ? spaces['{{event.eventId}}'] : '{{event.metadata.Players}}'">{{ event.metadata.Players }}</span>
                            </div>
                        {% else %}
                            Any
                        {% endif %}
                    </td>
                    {# Fav Event Icon #}
                    <td class="events-table-cell--fav" x-cloak x-show="isAuth">
                        <div class="flex justify-end">
                            <span @click="toggleFav({{event.eventId}})" class="fav-star" :class="isFav({{event.eventId}}) && 'favved'"></span>
                        </div>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</section>
<script type="text/javascript">

    document.addEventListener('alpine:init', () => {
        function compareValues(a, b) {
            // return -1/0/1 based on what you "know" a and b
            // are here. Numbers, text, some custom case-insensitive
            // and natural number ordering, etc. That's up to you.
            // A typical "do whatever JS would do" is:
            return (a < b)
                ? -1
                : (a > b)
                    ? 1
                    : 0;
        }

        Alpine.data('eventsTable', function () {
            return {
                init() {
                    if (this.sortAscending === undefined) {
                        this.sortAscending = true
                    }
                    this.sortTable(this.sortBy || 1, this.sortAscending)
                    // TODO: temporary force stored values to lowercase until everyone has this reset; in 10 days remove this after Sept 28th
                    this.getSpaces()
                },
                filter: this.$persist({favsOnly: false, openOnly: false, day: "all", overlap: false}),
                get isFilterDefault() {
                    return this.filter.favsOnly === false && this.filter.openOnly === false && this.filter.day === 'all' && this.filter.overlap === false
                },
                resetFilters() {
                    this.filter.favsOnly = false;
                    this.filter.openOnly = false;
                    this.filter.overlap = false;
                    this.filter.day = 'all';
                },
                resetUserFilters() {
                    this.filter.favsOnly = false;
                    this.filter.openOnly = false;
                    this.filter.overlap = false;
                },
                sortBy: this.$persist(1),
                sortAscending: this.$persist(true),
                sortTable(colnum, direction) {
                    // If this is the same column than switch direction
                    if (direction === undefined) {
                        if (this.sortBy === colnum) {
                            this.sortAscending = !this.sortAscending
                        } else {
                            this.sortAscending = true
                            this.sortBy = colnum
                        }
                    } else {
                        this.sortAscending = direction
                        this.sortBy = colnum
                    }

                    const table = document.querySelector('#events-table tbody');
                    let rows = Array.from(table.querySelectorAll(`tr`));

                    let qs = colnum === 1
                        ? `td:nth-child(${colnum}) h3`
                        : `td:nth-child(${colnum})`;
                    rows.sort((r1, r2) => {
                        // get each row's relevant column
                        let t1 = r1.querySelector(qs);
                        let t2 = r2.querySelector(qs);

                        // if it has data-sort attribute than use that
                        t1 = (t1.dataset.sort)
                            ? t1.dataset.sort
                            : t1.textContent
                        t2 = (t2.dataset.sort)
                            ? t2.dataset.sort
                            : t2.textContent

                        // and then effect sorting by comparing their content:
                        if (this.sortAscending) {
                            return compareValues(t1, t2);
                        } else {
                            return compareValues(t2, t1);
                        }
                    });

                    // and then the magic part that makes the sorting appear on-page:
                    rows.forEach(row => table.appendChild(row));
                },
                spaces: this.$persist({}),
                async getSpaces() {
                    const spaces = await fetchData('/events/spaces/public')
                    if (spaces) 
                        this.spaces = spaces
                }
            }
        })
    })
</script>